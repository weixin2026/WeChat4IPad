// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TransportMessage.proto

package Jubo.JuLiao.IM.Wx.Proto;

public final class TransportMessageOuterClass {
  private TransportMessageOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   *消息类型枚举，一般每一个消息类型都应该对应一个特定的message结构
   *20xx形式的消息类型需要 手机客户端开发者留意
   *30xx形式的消息类型需要 PC客户端开发者留意
   *10xx形式的消息类型需要 手机客户端、PC客户端开发者留意
   * </pre>
   *
   * Protobuf enum {@code Jubo.JuLiao.IM.Wx.Proto.EnumMsgType}
   */
  public enum EnumMsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *未知消息
     * </pre>
     *
     * <code>UnknownMsg = 0;</code>
     */
    UnknownMsg(0),
    /**
     * <pre>
     *服务器内部使用传递消息
     * </pre>
     *
     * <code>BrokerTransferTask = 1;</code>
     */
    BrokerTransferTask(1),
    /**
     * <pre>
     *设备授权、退出消息集群内广播消息
     * </pre>
     *
     * <code>DeviceAuthStatChangedBroadcast = 2;</code>
     */
    DeviceAuthStatChangedBroadcast(2),
    /**
     * <pre>
     *消息转发结果通知
     * </pre>
     *
     * <code>BrokerTransferTaskResult = 3;</code>
     */
    BrokerTransferTaskResult(3),
    /**
     * <pre>
     *客户端发送的心跳包
     * </pre>
     *
     * <code>HeartBeatReq = 1001;</code>
     */
    HeartBeatReq(1001),
    /**
     * <pre>
     *消息接收确认回复（接收或拒绝接收）
     * </pre>
     *
     * <code>MsgReceivedAck = 1002;</code>
     */
    MsgReceivedAck(1002),
    /**
     * <pre>
     *将错误单独提升为一种消息类型 4.1
     * </pre>
     *
     * <code>Error = 1003;</code>
     */
    Error(1003),
    /**
     * <pre>
     * 设备客户端授权类消息
     * </pre>
     *
     * <code>DeviceAuthReq = 1010;</code>
     */
    DeviceAuthReq(1010),
    /**
     * <pre>
     *设备(手机客户端、客服客户端)获取通信token响应 4.3
     * </pre>
     *
     * <code>DeviceAuthRsp = 1011;</code>
     */
    DeviceAuthRsp(1011),
    /**
     * <pre>
     *设备授权后退出(仅用于服务端内部)
     * </pre>
     *
     * <code>DeviceExitNotice = 1012;</code>
     */
    DeviceExitNotice(1012),
    /**
     * <pre>
     *账号强制下线通知 4.18
     * </pre>
     *
     * <code>AccountForceOfflineNotice = 1013;</code>
     */
    AccountForceOfflineNotice(1013),
    /**
     * <pre>
     * 手机客户端上传的通知类消息
     * </pre>
     *
     * <code>WeChatOnlineNotice = 1020;</code>
     */
    WeChatOnlineNotice(1020),
    /**
     * <pre>
     *手机客户端微信下线通知 4.5
     * </pre>
     *
     * <code>WeChatOfflineNotice = 1021;</code>
     */
    WeChatOfflineNotice(1021),
    /**
     * <pre>
     *微信个人号新增好友通知 4.6
     * </pre>
     *
     * <code>FriendAddNotice = 1022;</code>
     */
    FriendAddNotice(1022),
    /**
     * <pre>
     *微信个人号移除好友通知 4.7
     * </pre>
     *
     * <code>FriendDelNotice = 1023;</code>
     */
    FriendDelNotice(1023),
    /**
     * <pre>
     *微信好友发来聊天消息 4.8
     * </pre>
     *
     * <code>FriendTalkNotice = 1024;</code>
     */
    FriendTalkNotice(1024),
    /**
     * <pre>
     *任务执行结果通知 4.9
     * </pre>
     *
     * <code>TaskResultNotice = 1025;</code>
     */
    TaskResultNotice(1025),
    /**
     * <pre>
     * 手机上回复好友的聊天消息 4.16
     * </pre>
     *
     * <code>WeChatTalkToFriendNotice = 1026;</code>
     */
    WeChatTalkToFriendNotice(1026),
    /**
     * <pre>
     * 有好友请求添加好友的通知 4.14
     * </pre>
     *
     * <code>FriendAddReqeustNotice = 1027;</code>
     */
    FriendAddReqeustNotice(1027),
    /**
     * <pre>
     * 手机端向服务端通知聊天执行结果 4.17
     * </pre>
     *
     * <code>TalkToFriendTaskResultNotice = 1028;</code>
     */
    TalkToFriendTaskResultNotice(1028),
    /**
     * <pre>
     *图片或视频消息的详细内容结果 4.22
     * </pre>
     *
     * <code>RequestTalkDetailTaskResultNotice = 1029;</code>
     */
    RequestTalkDetailTaskResultNotice(1029),
    /**
     * <pre>
     *上传手机客户端上微信的二维码 4.51
     * </pre>
     *
     * <code>PullWeChatQrCodeTaskResultNotice = 1030;</code>
     */
    PullWeChatQrCodeTaskResultNotice(1030),
    /**
     * <pre>
     * 手机上发送了朋友圈通知 4.1.31 ***
     * </pre>
     *
     * <code>CircleNewPublishNotice = 1031;</code>
     */
    CircleNewPublishNotice(1031),
    /**
     * <pre>
     * 手机上删除朋友圈通知 4.1.32 ***
     * </pre>
     *
     * <code>CircleDelNotice = 1032;</code>
     */
    CircleDelNotice(1032),
    /**
     * <pre>
     * 手机检测到有人点赞/取消点赞通知 4.1.33 ***
     * </pre>
     *
     * <code>CircleLikeNotice = 1033;</code>
     */
    CircleLikeNotice(1033),
    /**
     * <pre>
     * 手机检测到有人评论/删除朋友圈通知 4.1.34 ***
     * </pre>
     *
     * <code>CircleCommentNotice = 1034;</code>
     */
    CircleCommentNotice(1034),
    /**
     * <pre>
     * 消息标记为已读 4.1.35
     * </pre>
     *
     * <code>PostMessageReadNotice = 1035;</code>
     */
    PostMessageReadNotice(1035),
    /**
     * <pre>
     * 联系人信息上传 4.1.36
     * </pre>
     *
     * <code>ContactsInfoNotice = 1036;</code>
     */
    ContactsInfoNotice(1036),
    /**
     * <pre>
     * 群聊新增通知 4.1.37
     * </pre>
     *
     * <code>ChatRoomAddNotice = 1037;</code>
     */
    ChatRoomAddNotice(1037),
    /**
     * <pre>
     * 联系人标签新增，修改通知
     * </pre>
     *
     * <code>ContactLabelAddNotice = 1038;</code>
     */
    ContactLabelAddNotice(1038),
    /**
     * <pre>
     * 收钱任务执行结果通知
     * </pre>
     *
     * <code>TakeMoneyTaskResultNotice = 1039;</code>
     */
    TakeMoneyTaskResultNotice(1039),
    /**
     * <pre>
     * 朋友圈图片上传
     * </pre>
     *
     * <code>CircleDetailNotice = 1040;</code>
     */
    CircleDetailNotice(1040),
    /**
     * <pre>
     * 群聊删除通知
     * </pre>
     *
     * <code>ChatRoomDelNotice = 1041;</code>
     */
    ChatRoomDelNotice(1041),
    /**
     * <pre>
     * 群聊信息变更通知
     * </pre>
     *
     * <code>ChatRoomChangedNotice = 1042;</code>
     */
    ChatRoomChangedNotice(1042),
    /**
     * <pre>
     * 群二维码
     * </pre>
     *
     * <code>PullChatRoomQrCodeTaskResultNotice = 1043;</code>
     */
    PullChatRoomQrCodeTaskResultNotice(1043),
    /**
     * <pre>
     * 服务端、客服客户端发给设备的指令类消息
     * </pre>
     *
     * <code>TalkToFriendTask = 1070;</code>
     */
    TalkToFriendTask(1070),
    /**
     * <pre>
     *发送朋友圈任务 4.11
     * </pre>
     *
     * <code>PostSNSNewsTask = 1071;</code>
     */
    PostSNSNewsTask(1071),
    /**
     * <pre>
     *主动添加好友任务 4.12
     * </pre>
     *
     * <code>AddFriendsTask = 1072;</code>
     */
    AddFriendsTask(1072),
    /**
     * <pre>
     * 发送朋友圈任务后数据回传 4.13
     * </pre>
     *
     * <code>PostSNSNewsTaskResultNotice = 1073;</code>
     */
    PostSNSNewsTaskResultNotice(1073),
    /**
     * <pre>
     * 删除朋友圈 4.26
     * </pre>
     *
     * <code>DeleteSNSNewsTask = 1074;</code>
     */
    DeleteSNSNewsTask(1074),
    /**
     * <pre>
     * 客户端或者服务端接受好友请求通知 4.15
     * </pre>
     *
     * <code>AcceptFriendAddRequestTask = 1075;</code>
     */
    AcceptFriendAddRequestTask(1075),
    /**
     * <pre>
     *群发消息任务 4.19
     * </pre>
     *
     * <code>WeChatGroupSendTask = 1076;</code>
     */
    WeChatGroupSendTask(1076),
    /**
     * <pre>
     *执行养号动作命令 4.20
     * </pre>
     *
     * <code>WeChatMaintenanceTask = 1077;</code>
     */
    WeChatMaintenanceTask(1077),
    /**
     * <pre>
     *请求图片或视频消息的详细内容 4.21
     * </pre>
     *
     * <code>RequestTalkDetailTask = 1078;</code>
     */
    RequestTalkDetailTask(1078),
    /**
     * <pre>
     *服务端主动要求手机上传当前登录的微信二维码 4.52
     * </pre>
     *
     * <code>PullWeChatQrCodeTask = 1079;</code>
     */
    PullWeChatQrCodeTask(1079),
    /**
     * <pre>
     * 触发手机推送好友列表任务 4.25
     * </pre>
     *
     * <code>TriggerFriendPushTask = 1080;</code>
     */
    TriggerFriendPushTask(1080),
    /**
     * <pre>
     * 触发手机推送朋友圈列表任务 4.1.81 ***
     * </pre>
     *
     * <code>TriggerCirclePushTask = 1081;</code>
     */
    TriggerCirclePushTask(1081),
    /**
     * <pre>
     * 朋友圈评论删除任务 4.1.82 ***
     * </pre>
     *
     * <code>CircleCommentDeleteTask = 1082;</code>
     */
    CircleCommentDeleteTask(1082),
    /**
     * <pre>
     * 朋友圈评论删除任务反馈 4.1.83
     * </pre>
     *
     * <code>CircleCommentDeleteTaskResultNotice = 1083;</code>
     */
    CircleCommentDeleteTaskResultNotice(1083),
    /**
     * <pre>
     * 朋友圈评论回复任务 4.1.84 ***
     * </pre>
     *
     * <code>CircleCommentReplyTask = 1084;</code>
     */
    CircleCommentReplyTask(1084),
    /**
     * <pre>
     * 朋友圈评论回复反馈 4.1.85 ***
     * </pre>
     *
     * <code>CircleCommentReplyTaskResultNotice = 1085;</code>
     */
    CircleCommentReplyTaskResultNotice(1085),
    /**
     * <pre>
     * 通知手机将某个聊天窗口置为已读 4.1.86
     * </pre>
     *
     * <code>TriggerMessageReadTask = 1086;</code>
     */
    TriggerMessageReadTask(1086),
    /**
     * <pre>
     * 消息撤回 4.1.87
     * </pre>
     *
     * <code>RevokeMessageTask = 1087;</code>
     */
    RevokeMessageTask(1087),
    /**
     * <pre>
     * 转发消息 4.1.88
     * </pre>
     *
     * <code>ForwardMessageTask = 1088;</code>
     */
    ForwardMessageTask(1088),
    /**
     * <pre>
     * 通知手机推送聊天记录
     * </pre>
     *
     * <code>TriggerHistoryMsgPushTask = 1089;</code>
     */
    TriggerHistoryMsgPushTask(1089),
    /**
     * <pre>
     * 获取群聊二维码
     * </pre>
     *
     * <code>PullChatRoomQrCodeTask = 1090;</code>
     */
    PullChatRoomQrCodeTask(1090),
    /**
     * <pre>
     * juketool发送给服务端执行的命令
     * </pre>
     *
     * <code>PostDeviceReAllocTask = 1091;</code>
     */
    PostDeviceReAllocTask(1091),
    /**
     * <pre>
     * 通知服务端下线账号 4.32   
     * </pre>
     *
     * <code>PostAccountOfflineTask = 1092;</code>
     */
    PostAccountOfflineTask(1092),
    /**
     * <pre>
     * 服务端通知版本升级 4.33
     * </pre>
     *
     * <code>UpgradeAppNotice = 1093;</code>
     */
    UpgradeAppNotice(1093),
    /**
     * <pre>
     * 通知手机客户端软件升级 4.34
     * </pre>
     *
     * <code>UpgradeDeviceAppNotice = 1094;</code>
     */
    UpgradeDeviceAppNotice(1094),
    /**
     * <pre>
     *清粉任务 4.35
     * </pre>
     *
     * <code>PostFriendDetectTask = 1095;</code>
     */
    PostFriendDetectTask(1095),
    /**
     * <pre>
     *终止清粉任务  4.36
     * </pre>
     *
     * <code>PostStopFriendDetectTask = 1096;</code>
     */
    PostStopFriendDetectTask(1096),
    /**
     * <pre>
     * 删除设备通知  4.37
     * </pre>
     *
     * <code>PostDeleteDeviceNotice = 1097;</code>
     */
    PostDeleteDeviceNotice(1097),
    /**
     * <pre>
     *朋友圈点赞任务  4.1.98
     * </pre>
     *
     * <code>PostMomentsPraiseTask = 1098;</code>
     */
    PostMomentsPraiseTask(1098),
    /**
     * <pre>
     *停止朋友圈点赞任务 4.1.99
     * </pre>
     *
     * <code>PostStopMomentsPraiseTask = 1099;</code>
     */
    PostStopMomentsPraiseTask(1099),
    /**
     * <pre>
     *养号任务停止 4.1.100
     * </pre>
     *
     * <code>PostStopWeChatMaintenanceTask = 1100;</code>
     */
    PostStopWeChatMaintenanceTask(1100),
    /**
     * <pre>
     *修改备注任务
     * </pre>
     *
     * <code>ModifyFriendMemoTask = 1101;</code>
     */
    ModifyFriendMemoTask(1101),
    /**
     * <pre>
     * 领取红包或转账
     * </pre>
     *
     * <code>TakeLuckyMoneyTask = 1200;</code>
     */
    TakeLuckyMoneyTask(1200),
    /**
     * <pre>
     * 获取指定好友朋友圈
     * </pre>
     *
     * <code>PullFriendCircleTask = 1201;</code>
     */
    PullFriendCircleTask(1201),
    /**
     * <pre>
     * 获取朋友圈图片
     * </pre>
     *
     * <code>PullCircleDetailTask = 1202;</code>
     */
    PullCircleDetailTask(1202),
    /**
     * <pre>
     * 单条朋友圈点赞任务
     * </pre>
     *
     * <code>CircleLikeTask = 1203;</code>
     */
    CircleLikeTask(1203),
    /**
     * <pre>
     *触发手机推送群聊列表
     * </pre>
     *
     * <code>TriggerChatroomPushTask = 1210;</code>
     */
    TriggerChatroomPushTask(1210),
    /**
     * <pre>
     * 请求具体群聊的详细信息
     * </pre>
     *
     * <code>RequestChatRoomInfoTask = 1211;</code>
     */
    RequestChatRoomInfoTask(1211),
    /**
     * <pre>
     * 获取联系人详细信息（不一定是好友，如群聊成员）
     * </pre>
     *
     * <code>RequestContactsInfoTask = 1212;</code>
     */
    RequestContactsInfoTask(1212),
    /**
     * <pre>
     * 群聊管理
     * </pre>
     *
     * <code>ChatRoomActionTask = 1213;</code>
     */
    ChatRoomActionTask(1213),
    /**
     * <pre>
     * 群内加好友
     * </pre>
     *
     * <code>AddFriendInChatRoomTask = 1214;</code>
     */
    AddFriendInChatRoomTask(1214),
    /**
     * <pre>
     * 通讯录加好友
     * </pre>
     *
     * <code>AddFriendFromPhonebookTask = 1215;</code>
     */
    AddFriendFromPhonebookTask(1215),
    /**
     * <pre>
     * 删除好友
     * </pre>
     *
     * <code>DeleteFriendTask = 1216;</code>
     */
    DeleteFriendTask(1216),
    /**
     * <pre>
     * 发红包
     * </pre>
     *
     * <code>SendLuckyMoneyTask = 1217;</code>
     */
    SendLuckyMoneyTask(1217),
    /**
     * <pre>
     * 获取聊天消息的原始内容（主要是xml内容）
     * </pre>
     *
     * <code>RequestTalkContentTask = 1218;</code>
     */
    RequestTalkContentTask(1218),
    /**
     * <pre>
     * 返回聊天消息的原始内容
     * </pre>
     *
     * <code>RequestTalkContentTaskResultNotice = 1219;</code>
     */
    RequestTalkContentTaskResultNotice(1219),
    /**
     * <pre>
     * 转发消息内容
     * </pre>
     *
     * <code>ForwardMessageByContentTask = 1220;</code>
     */
    ForwardMessageByContentTask(1220),
    /**
     * <pre>
     * 手机端主动发出的交互类消息 
     * </pre>
     *
     * <code>FriendPushNotice = 2026;</code>
     */
    FriendPushNotice(2026),
    /**
     * <pre>
     * 手机端推送当前安装版本 4.51
     * </pre>
     *
     * <code>PostDeviceInfoNotice = 2027;</code>
     */
    PostDeviceInfoNotice(2027),
    /**
     * <pre>
     *手机端回传检测清粉好友数 4.52
     * </pre>
     *
     * <code>PostFriendDetectCountNotice = 2028;</code>
     */
    PostFriendDetectCountNotice(2028),
    /**
     * <pre>
     * 手机回传朋友圈数据 4.2.4
     * </pre>
     *
     * <code>CirclePushNotice = 2029;</code>
     */
    CirclePushNotice(2029),
    /**
     * <pre>
     * 手机回传朋友圈点赞数量 4.2.5
     * </pre>
     *
     * <code>PostMomentsPraiseCountNotice = 2030;</code>
     */
    PostMomentsPraiseCountNotice(2030),
    /**
     * <pre>
     * 手机端推送群聊列表
     * </pre>
     *
     * <code>ChatroomPushNotice = 2031;</code>
     */
    ChatroomPushNotice(2031),
    /**
     * <pre>
     * 手机端推送标签列表
     * </pre>
     *
     * <code>ContactLabelInfoNotice = 2032;</code>
     */
    ContactLabelInfoNotice(2032),
    /**
     * <pre>
     * 推送历史消息
     * </pre>
     *
     * <code>HistoryMsgPushNotice = 2033;</code>
     */
    HistoryMsgPushNotice(2033),
    /**
     * <pre>
     * 群成员（陌生人）信息
     * </pre>
     *
     * <code>ChatRoomMembersNotice = 2034;</code>
     */
    ChatRoomMembersNotice(2034),
    /**
     * <pre>
     * 客服客户端主动发出的交互类消息 与手机端无关 
     * </pre>
     *
     * <code>GetWeChatsReq = 3050;</code>
     */
    GetWeChatsReq(3050),
    /**
     * <pre>
     *拉取当前微信个人号列表响应(立即) 4.82
     * </pre>
     *
     * <code>GetWeChatsRsp = 3051;</code>
     */
    GetWeChatsRsp(3051),
    /**
     * <pre>
     * 最近好友数据更改通知(服务器下发) 4.83
     * </pre>
     *
     * <code>RecentFriendChangeNotice = 3052;</code>
     */
    RecentFriendChangeNotice(3052),
    /**
     * <pre>
     * 今日接待数据更改通知(服务器下发) 4.84
     * </pre>
     *
     * <code>TodayFriendChangeNotice = 3053;</code>
     */
    TodayFriendChangeNotice(3053),
    /**
     * <pre>
     * 客户端退出通知 4.85
     * </pre>
     *
     * <code>AccountLogoutNotice = 3054;</code>
     */
    AccountLogoutNotice(3054),
    /**
     * <pre>
     * 客户端选择微信号登陆通知 4.86
     * </pre>
     *
     * <code>WeChatLoginNotice = 3055;</code>
     */
    WeChatLoginNotice(3055),
    /**
     * <pre>
     *PC客户端请求同步好友列表 4.87
     * </pre>
     *
     * <code>SyncFriendListAsyncReq = 3056;</code>
     */
    SyncFriendListAsyncReq(3056),
    /**
     * <pre>
     * 同步好友推送的数据模型 4.88
     * </pre>
     *
     * <code>SyncFriendListAsyncRsp = 3057;</code>
     */
    SyncFriendListAsyncRsp(3057),
    /**
     * <pre>
     * 同步最近聊天好友列表 4.89
     * </pre>
     *
     * <code>SyncRecentFriendListAsyncReq = 3058;</code>
     */
    SyncRecentFriendListAsyncReq(3058),
    /**
     * <pre>
     * 同步最近聊天好友响应（异步） 4.90
     * </pre>
     *
     * <code>SyncRecentFriendListAsyncRsp = 3059;</code>
     */
    SyncRecentFriendListAsyncRsp(3059),
    /**
     * <pre>
     * 同步今日接待好友列表请求 4.91
     * </pre>
     *
     * <code>SyncTodayFriendListAsyncReq = 3060;</code>
     */
    SyncTodayFriendListAsyncReq(3060),
    /**
     * <pre>
     * 同步今日接待好友响应（异步） 4.92
     * </pre>
     *
     * <code>SyncTodayFriendListAsyncRsp = 3061;</code>
     */
    SyncTodayFriendListAsyncRsp(3061),
    /**
     * <pre>
     * 同步好友消息数据请求 4.93
     * </pre>
     *
     * <code>SyncFriendMessageAsyncReq = 3062;</code>
     */
    SyncFriendMessageAsyncReq(3062),
    /**
     * <pre>
     * 同步好友消息数据响应（异步）4.94
     * </pre>
     *
     * <code>SyncFriendMessageAsyncRsp = 3063;</code>
     */
    SyncFriendMessageAsyncRsp(3063),
    /**
     * <pre>
     * TalkToFriendTask的即时响应(服务器下发) 4.95
     * </pre>
     *
     * <code>TalkToFriendTaskReceived = 3064;</code>
     */
    TalkToFriendTaskReceived(3064),
    /**
     * <pre>
     * 标记消息已读 4.96
     * </pre>
     *
     * <code>ReadChatMessageNotice = 3065;</code>
     */
    ReadChatMessageNotice(3065),
    /**
     * <pre>
     * 同步加好友请求 4.97
     * </pre>
     *
     * <code>SyncFriendAddReqeustAsyncReq = 3066;</code>
     */
    SyncFriendAddReqeustAsyncReq(3066),
    /**
     * <pre>
     * 同步加好友列表数据响应 4.98
     * </pre>
     *
     * <code>SyncFriendAddRequestAsyncRsp = 3067;</code>
     */
    SyncFriendAddRequestAsyncRsp(3067),
    /**
     * <pre>
     * 微信登出通知(服务器下发) 4.99
     * </pre>
     *
     * <code>WeChatForceOfflineNotice = 3068;</code>
     */
    WeChatForceOfflineNotice(3068),
    /**
     * <pre>
     * 快捷回复信息请求模型 4.100
     * </pre>
     *
     * <code>SyncQuickReplyAsyncReq = 3069;</code>
     */
    SyncQuickReplyAsyncReq(3069),
    /**
     * <pre>
     * 快捷回复信息响应 4.101
     * </pre>
     *
     * <code>SyncQuickReplyAsyncRsp = 3070;</code>
     */
    SyncQuickReplyAsyncRsp(3070),
    /**
     * <pre>
     * 快捷回复添加通知 4.102
     * </pre>
     *
     * <code>QuickReplyAddNotice = 3071;</code>
     */
    QuickReplyAddNotice(3071),
    /**
     * <pre>
     * 快捷回复添加被接受 4.103
     * </pre>
     *
     * <code>QuickReplyAddReceived = 3072;</code>
     */
    QuickReplyAddReceived(3072),
    /**
     * <pre>
     * 快捷回复删除通知 4.104
     * </pre>
     *
     * <code>QuickReplyDelNotice = 3073;</code>
     */
    QuickReplyDelNotice(3073),
    /**
     * <pre>
     * 获取标签分组请求数据 4.105
     * </pre>
     *
     * <code>GetTagGroupReq = 3074;</code>
     */
    GetTagGroupReq(3074),
    /**
     * <pre>
     * 获取标签分组数据响应数据 4.106
     * </pre>
     *
     * <code>GetTagGroupRsp = 3075;</code>
     */
    GetTagGroupRsp(3075),
    /**
     * <pre>
     * 获取标签下的好友数据请求 4.107
     * </pre>
     *
     * <code>GetTagFriendsReq = 3076;</code>
     */
    GetTagFriendsReq(3076),
    /**
     * <pre>
     * 获取标签下的好友数据响应 4.108
     * </pre>
     *
     * <code>GetTagFriendsRsp = 3077;</code>
     */
    GetTagFriendsRsp(3077),
    /**
     * <pre>
     * 微信在设备上上线通知 4.109
     * </pre>
     *
     * <code>WeChatForceOnlineNotice = 3078;</code>
     */
    WeChatForceOnlineNotice(3078),
    /**
     * <pre>
     * 删除最近聊天好友通知 4.110
     * </pre>
     *
     * <code>DeleteRecentFriendNotice = 3079;</code>
     */
    DeleteRecentFriendNotice(3079),
    /**
     * <pre>
     * 删除今日接待好友通知 4.111
     * </pre>
     *
     * <code>DeleteTodayFriendNotice = 3080;</code>
     */
    DeleteTodayFriendNotice(3080),
    /**
     * <pre>
     * 微信信息更改通知 4.112
     * </pre>
     *
     * <code>WeChatInfoChangeNotice = 3081;</code>
     */
    WeChatInfoChangeNotice(3081),
    /**
     * <pre>
     * 获取最后一个版本的请求 4.113
     * </pre>
     *
     * <code>GetLastestVersionReq = 3082;</code>
     */
    GetLastestVersionReq(3082),
    /**
     * <pre>
     * 获取最后一个版本的响应 4.114
     * </pre>
     *
     * <code>GetLastestVersionRsp = 3083;</code>
     */
    GetLastestVersionRsp(3083),
    /**
     * <pre>
     * 检测设备App版本请求 4.115
     * </pre>
     *
     * <code>CheckDeviceAppVersionReq = 3084;</code>
     */
    CheckDeviceAppVersionReq(3084),
    /**
     * <pre>
     * 检测设备App版本响应 4.116
     * </pre>
     *
     * <code>CheckDeviceAppVersionRsp = 3085;</code>
     */
    CheckDeviceAppVersionRsp(3085),
    /**
     * <pre>
     * 有新版本软件发布通知 4.117
     * </pre>
     *
     * <code>NewAppVersionPublishNotice = 3086;</code>
     */
    NewAppVersionPublishNotice(3086),
    /**
     * <pre>
     * 客户端上报客户端信息 4.201
     * </pre>
     *
     * <code>PostAppInfoReq = 3201;</code>
     */
    PostAppInfoReq(3201),
    /**
     * <pre>
     * 客户端上传日志 4.202
     * </pre>
     *
     * <code>PostLogReq = 3202;</code>
     */
    PostLogReq(3202),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *未知消息
     * </pre>
     *
     * <code>UnknownMsg = 0;</code>
     */
    public static final int UnknownMsg_VALUE = 0;
    /**
     * <pre>
     *服务器内部使用传递消息
     * </pre>
     *
     * <code>BrokerTransferTask = 1;</code>
     */
    public static final int BrokerTransferTask_VALUE = 1;
    /**
     * <pre>
     *设备授权、退出消息集群内广播消息
     * </pre>
     *
     * <code>DeviceAuthStatChangedBroadcast = 2;</code>
     */
    public static final int DeviceAuthStatChangedBroadcast_VALUE = 2;
    /**
     * <pre>
     *消息转发结果通知
     * </pre>
     *
     * <code>BrokerTransferTaskResult = 3;</code>
     */
    public static final int BrokerTransferTaskResult_VALUE = 3;
    /**
     * <pre>
     *客户端发送的心跳包
     * </pre>
     *
     * <code>HeartBeatReq = 1001;</code>
     */
    public static final int HeartBeatReq_VALUE = 1001;
    /**
     * <pre>
     *消息接收确认回复（接收或拒绝接收）
     * </pre>
     *
     * <code>MsgReceivedAck = 1002;</code>
     */
    public static final int MsgReceivedAck_VALUE = 1002;
    /**
     * <pre>
     *将错误单独提升为一种消息类型 4.1
     * </pre>
     *
     * <code>Error = 1003;</code>
     */
    public static final int Error_VALUE = 1003;
    /**
     * <pre>
     * 设备客户端授权类消息
     * </pre>
     *
     * <code>DeviceAuthReq = 1010;</code>
     */
    public static final int DeviceAuthReq_VALUE = 1010;
    /**
     * <pre>
     *设备(手机客户端、客服客户端)获取通信token响应 4.3
     * </pre>
     *
     * <code>DeviceAuthRsp = 1011;</code>
     */
    public static final int DeviceAuthRsp_VALUE = 1011;
    /**
     * <pre>
     *设备授权后退出(仅用于服务端内部)
     * </pre>
     *
     * <code>DeviceExitNotice = 1012;</code>
     */
    public static final int DeviceExitNotice_VALUE = 1012;
    /**
     * <pre>
     *账号强制下线通知 4.18
     * </pre>
     *
     * <code>AccountForceOfflineNotice = 1013;</code>
     */
    public static final int AccountForceOfflineNotice_VALUE = 1013;
    /**
     * <pre>
     * 手机客户端上传的通知类消息
     * </pre>
     *
     * <code>WeChatOnlineNotice = 1020;</code>
     */
    public static final int WeChatOnlineNotice_VALUE = 1020;
    /**
     * <pre>
     *手机客户端微信下线通知 4.5
     * </pre>
     *
     * <code>WeChatOfflineNotice = 1021;</code>
     */
    public static final int WeChatOfflineNotice_VALUE = 1021;
    /**
     * <pre>
     *微信个人号新增好友通知 4.6
     * </pre>
     *
     * <code>FriendAddNotice = 1022;</code>
     */
    public static final int FriendAddNotice_VALUE = 1022;
    /**
     * <pre>
     *微信个人号移除好友通知 4.7
     * </pre>
     *
     * <code>FriendDelNotice = 1023;</code>
     */
    public static final int FriendDelNotice_VALUE = 1023;
    /**
     * <pre>
     *微信好友发来聊天消息 4.8
     * </pre>
     *
     * <code>FriendTalkNotice = 1024;</code>
     */
    public static final int FriendTalkNotice_VALUE = 1024;
    /**
     * <pre>
     *任务执行结果通知 4.9
     * </pre>
     *
     * <code>TaskResultNotice = 1025;</code>
     */
    public static final int TaskResultNotice_VALUE = 1025;
    /**
     * <pre>
     * 手机上回复好友的聊天消息 4.16
     * </pre>
     *
     * <code>WeChatTalkToFriendNotice = 1026;</code>
     */
    public static final int WeChatTalkToFriendNotice_VALUE = 1026;
    /**
     * <pre>
     * 有好友请求添加好友的通知 4.14
     * </pre>
     *
     * <code>FriendAddReqeustNotice = 1027;</code>
     */
    public static final int FriendAddReqeustNotice_VALUE = 1027;
    /**
     * <pre>
     * 手机端向服务端通知聊天执行结果 4.17
     * </pre>
     *
     * <code>TalkToFriendTaskResultNotice = 1028;</code>
     */
    public static final int TalkToFriendTaskResultNotice_VALUE = 1028;
    /**
     * <pre>
     *图片或视频消息的详细内容结果 4.22
     * </pre>
     *
     * <code>RequestTalkDetailTaskResultNotice = 1029;</code>
     */
    public static final int RequestTalkDetailTaskResultNotice_VALUE = 1029;
    /**
     * <pre>
     *上传手机客户端上微信的二维码 4.51
     * </pre>
     *
     * <code>PullWeChatQrCodeTaskResultNotice = 1030;</code>
     */
    public static final int PullWeChatQrCodeTaskResultNotice_VALUE = 1030;
    /**
     * <pre>
     * 手机上发送了朋友圈通知 4.1.31 ***
     * </pre>
     *
     * <code>CircleNewPublishNotice = 1031;</code>
     */
    public static final int CircleNewPublishNotice_VALUE = 1031;
    /**
     * <pre>
     * 手机上删除朋友圈通知 4.1.32 ***
     * </pre>
     *
     * <code>CircleDelNotice = 1032;</code>
     */
    public static final int CircleDelNotice_VALUE = 1032;
    /**
     * <pre>
     * 手机检测到有人点赞/取消点赞通知 4.1.33 ***
     * </pre>
     *
     * <code>CircleLikeNotice = 1033;</code>
     */
    public static final int CircleLikeNotice_VALUE = 1033;
    /**
     * <pre>
     * 手机检测到有人评论/删除朋友圈通知 4.1.34 ***
     * </pre>
     *
     * <code>CircleCommentNotice = 1034;</code>
     */
    public static final int CircleCommentNotice_VALUE = 1034;
    /**
     * <pre>
     * 消息标记为已读 4.1.35
     * </pre>
     *
     * <code>PostMessageReadNotice = 1035;</code>
     */
    public static final int PostMessageReadNotice_VALUE = 1035;
    /**
     * <pre>
     * 联系人信息上传 4.1.36
     * </pre>
     *
     * <code>ContactsInfoNotice = 1036;</code>
     */
    public static final int ContactsInfoNotice_VALUE = 1036;
    /**
     * <pre>
     * 群聊新增通知 4.1.37
     * </pre>
     *
     * <code>ChatRoomAddNotice = 1037;</code>
     */
    public static final int ChatRoomAddNotice_VALUE = 1037;
    /**
     * <pre>
     * 联系人标签新增，修改通知
     * </pre>
     *
     * <code>ContactLabelAddNotice = 1038;</code>
     */
    public static final int ContactLabelAddNotice_VALUE = 1038;
    /**
     * <pre>
     * 收钱任务执行结果通知
     * </pre>
     *
     * <code>TakeMoneyTaskResultNotice = 1039;</code>
     */
    public static final int TakeMoneyTaskResultNotice_VALUE = 1039;
    /**
     * <pre>
     * 朋友圈图片上传
     * </pre>
     *
     * <code>CircleDetailNotice = 1040;</code>
     */
    public static final int CircleDetailNotice_VALUE = 1040;
    /**
     * <pre>
     * 群聊删除通知
     * </pre>
     *
     * <code>ChatRoomDelNotice = 1041;</code>
     */
    public static final int ChatRoomDelNotice_VALUE = 1041;
    /**
     * <pre>
     * 群聊信息变更通知
     * </pre>
     *
     * <code>ChatRoomChangedNotice = 1042;</code>
     */
    public static final int ChatRoomChangedNotice_VALUE = 1042;
    /**
     * <pre>
     * 群二维码
     * </pre>
     *
     * <code>PullChatRoomQrCodeTaskResultNotice = 1043;</code>
     */
    public static final int PullChatRoomQrCodeTaskResultNotice_VALUE = 1043;
    /**
     * <pre>
     * 服务端、客服客户端发给设备的指令类消息
     * </pre>
     *
     * <code>TalkToFriendTask = 1070;</code>
     */
    public static final int TalkToFriendTask_VALUE = 1070;
    /**
     * <pre>
     *发送朋友圈任务 4.11
     * </pre>
     *
     * <code>PostSNSNewsTask = 1071;</code>
     */
    public static final int PostSNSNewsTask_VALUE = 1071;
    /**
     * <pre>
     *主动添加好友任务 4.12
     * </pre>
     *
     * <code>AddFriendsTask = 1072;</code>
     */
    public static final int AddFriendsTask_VALUE = 1072;
    /**
     * <pre>
     * 发送朋友圈任务后数据回传 4.13
     * </pre>
     *
     * <code>PostSNSNewsTaskResultNotice = 1073;</code>
     */
    public static final int PostSNSNewsTaskResultNotice_VALUE = 1073;
    /**
     * <pre>
     * 删除朋友圈 4.26
     * </pre>
     *
     * <code>DeleteSNSNewsTask = 1074;</code>
     */
    public static final int DeleteSNSNewsTask_VALUE = 1074;
    /**
     * <pre>
     * 客户端或者服务端接受好友请求通知 4.15
     * </pre>
     *
     * <code>AcceptFriendAddRequestTask = 1075;</code>
     */
    public static final int AcceptFriendAddRequestTask_VALUE = 1075;
    /**
     * <pre>
     *群发消息任务 4.19
     * </pre>
     *
     * <code>WeChatGroupSendTask = 1076;</code>
     */
    public static final int WeChatGroupSendTask_VALUE = 1076;
    /**
     * <pre>
     *执行养号动作命令 4.20
     * </pre>
     *
     * <code>WeChatMaintenanceTask = 1077;</code>
     */
    public static final int WeChatMaintenanceTask_VALUE = 1077;
    /**
     * <pre>
     *请求图片或视频消息的详细内容 4.21
     * </pre>
     *
     * <code>RequestTalkDetailTask = 1078;</code>
     */
    public static final int RequestTalkDetailTask_VALUE = 1078;
    /**
     * <pre>
     *服务端主动要求手机上传当前登录的微信二维码 4.52
     * </pre>
     *
     * <code>PullWeChatQrCodeTask = 1079;</code>
     */
    public static final int PullWeChatQrCodeTask_VALUE = 1079;
    /**
     * <pre>
     * 触发手机推送好友列表任务 4.25
     * </pre>
     *
     * <code>TriggerFriendPushTask = 1080;</code>
     */
    public static final int TriggerFriendPushTask_VALUE = 1080;
    /**
     * <pre>
     * 触发手机推送朋友圈列表任务 4.1.81 ***
     * </pre>
     *
     * <code>TriggerCirclePushTask = 1081;</code>
     */
    public static final int TriggerCirclePushTask_VALUE = 1081;
    /**
     * <pre>
     * 朋友圈评论删除任务 4.1.82 ***
     * </pre>
     *
     * <code>CircleCommentDeleteTask = 1082;</code>
     */
    public static final int CircleCommentDeleteTask_VALUE = 1082;
    /**
     * <pre>
     * 朋友圈评论删除任务反馈 4.1.83
     * </pre>
     *
     * <code>CircleCommentDeleteTaskResultNotice = 1083;</code>
     */
    public static final int CircleCommentDeleteTaskResultNotice_VALUE = 1083;
    /**
     * <pre>
     * 朋友圈评论回复任务 4.1.84 ***
     * </pre>
     *
     * <code>CircleCommentReplyTask = 1084;</code>
     */
    public static final int CircleCommentReplyTask_VALUE = 1084;
    /**
     * <pre>
     * 朋友圈评论回复反馈 4.1.85 ***
     * </pre>
     *
     * <code>CircleCommentReplyTaskResultNotice = 1085;</code>
     */
    public static final int CircleCommentReplyTaskResultNotice_VALUE = 1085;
    /**
     * <pre>
     * 通知手机将某个聊天窗口置为已读 4.1.86
     * </pre>
     *
     * <code>TriggerMessageReadTask = 1086;</code>
     */
    public static final int TriggerMessageReadTask_VALUE = 1086;
    /**
     * <pre>
     * 消息撤回 4.1.87
     * </pre>
     *
     * <code>RevokeMessageTask = 1087;</code>
     */
    public static final int RevokeMessageTask_VALUE = 1087;
    /**
     * <pre>
     * 转发消息 4.1.88
     * </pre>
     *
     * <code>ForwardMessageTask = 1088;</code>
     */
    public static final int ForwardMessageTask_VALUE = 1088;
    /**
     * <pre>
     * 通知手机推送聊天记录
     * </pre>
     *
     * <code>TriggerHistoryMsgPushTask = 1089;</code>
     */
    public static final int TriggerHistoryMsgPushTask_VALUE = 1089;
    /**
     * <pre>
     * 获取群聊二维码
     * </pre>
     *
     * <code>PullChatRoomQrCodeTask = 1090;</code>
     */
    public static final int PullChatRoomQrCodeTask_VALUE = 1090;
    /**
     * <pre>
     * juketool发送给服务端执行的命令
     * </pre>
     *
     * <code>PostDeviceReAllocTask = 1091;</code>
     */
    public static final int PostDeviceReAllocTask_VALUE = 1091;
    /**
     * <pre>
     * 通知服务端下线账号 4.32   
     * </pre>
     *
     * <code>PostAccountOfflineTask = 1092;</code>
     */
    public static final int PostAccountOfflineTask_VALUE = 1092;
    /**
     * <pre>
     * 服务端通知版本升级 4.33
     * </pre>
     *
     * <code>UpgradeAppNotice = 1093;</code>
     */
    public static final int UpgradeAppNotice_VALUE = 1093;
    /**
     * <pre>
     * 通知手机客户端软件升级 4.34
     * </pre>
     *
     * <code>UpgradeDeviceAppNotice = 1094;</code>
     */
    public static final int UpgradeDeviceAppNotice_VALUE = 1094;
    /**
     * <pre>
     *清粉任务 4.35
     * </pre>
     *
     * <code>PostFriendDetectTask = 1095;</code>
     */
    public static final int PostFriendDetectTask_VALUE = 1095;
    /**
     * <pre>
     *终止清粉任务  4.36
     * </pre>
     *
     * <code>PostStopFriendDetectTask = 1096;</code>
     */
    public static final int PostStopFriendDetectTask_VALUE = 1096;
    /**
     * <pre>
     * 删除设备通知  4.37
     * </pre>
     *
     * <code>PostDeleteDeviceNotice = 1097;</code>
     */
    public static final int PostDeleteDeviceNotice_VALUE = 1097;
    /**
     * <pre>
     *朋友圈点赞任务  4.1.98
     * </pre>
     *
     * <code>PostMomentsPraiseTask = 1098;</code>
     */
    public static final int PostMomentsPraiseTask_VALUE = 1098;
    /**
     * <pre>
     *停止朋友圈点赞任务 4.1.99
     * </pre>
     *
     * <code>PostStopMomentsPraiseTask = 1099;</code>
     */
    public static final int PostStopMomentsPraiseTask_VALUE = 1099;
    /**
     * <pre>
     *养号任务停止 4.1.100
     * </pre>
     *
     * <code>PostStopWeChatMaintenanceTask = 1100;</code>
     */
    public static final int PostStopWeChatMaintenanceTask_VALUE = 1100;
    /**
     * <pre>
     *修改备注任务
     * </pre>
     *
     * <code>ModifyFriendMemoTask = 1101;</code>
     */
    public static final int ModifyFriendMemoTask_VALUE = 1101;
    /**
     * <pre>
     * 领取红包或转账
     * </pre>
     *
     * <code>TakeLuckyMoneyTask = 1200;</code>
     */
    public static final int TakeLuckyMoneyTask_VALUE = 1200;
    /**
     * <pre>
     * 获取指定好友朋友圈
     * </pre>
     *
     * <code>PullFriendCircleTask = 1201;</code>
     */
    public static final int PullFriendCircleTask_VALUE = 1201;
    /**
     * <pre>
     * 获取朋友圈图片
     * </pre>
     *
     * <code>PullCircleDetailTask = 1202;</code>
     */
    public static final int PullCircleDetailTask_VALUE = 1202;
    /**
     * <pre>
     * 单条朋友圈点赞任务
     * </pre>
     *
     * <code>CircleLikeTask = 1203;</code>
     */
    public static final int CircleLikeTask_VALUE = 1203;
    /**
     * <pre>
     *触发手机推送群聊列表
     * </pre>
     *
     * <code>TriggerChatroomPushTask = 1210;</code>
     */
    public static final int TriggerChatroomPushTask_VALUE = 1210;
    /**
     * <pre>
     * 请求具体群聊的详细信息
     * </pre>
     *
     * <code>RequestChatRoomInfoTask = 1211;</code>
     */
    public static final int RequestChatRoomInfoTask_VALUE = 1211;
    /**
     * <pre>
     * 获取联系人详细信息（不一定是好友，如群聊成员）
     * </pre>
     *
     * <code>RequestContactsInfoTask = 1212;</code>
     */
    public static final int RequestContactsInfoTask_VALUE = 1212;
    /**
     * <pre>
     * 群聊管理
     * </pre>
     *
     * <code>ChatRoomActionTask = 1213;</code>
     */
    public static final int ChatRoomActionTask_VALUE = 1213;
    /**
     * <pre>
     * 群内加好友
     * </pre>
     *
     * <code>AddFriendInChatRoomTask = 1214;</code>
     */
    public static final int AddFriendInChatRoomTask_VALUE = 1214;
    /**
     * <pre>
     * 通讯录加好友
     * </pre>
     *
     * <code>AddFriendFromPhonebookTask = 1215;</code>
     */
    public static final int AddFriendFromPhonebookTask_VALUE = 1215;
    /**
     * <pre>
     * 删除好友
     * </pre>
     *
     * <code>DeleteFriendTask = 1216;</code>
     */
    public static final int DeleteFriendTask_VALUE = 1216;
    /**
     * <pre>
     * 发红包
     * </pre>
     *
     * <code>SendLuckyMoneyTask = 1217;</code>
     */
    public static final int SendLuckyMoneyTask_VALUE = 1217;
    /**
     * <pre>
     * 获取聊天消息的原始内容（主要是xml内容）
     * </pre>
     *
     * <code>RequestTalkContentTask = 1218;</code>
     */
    public static final int RequestTalkContentTask_VALUE = 1218;
    /**
     * <pre>
     * 返回聊天消息的原始内容
     * </pre>
     *
     * <code>RequestTalkContentTaskResultNotice = 1219;</code>
     */
    public static final int RequestTalkContentTaskResultNotice_VALUE = 1219;
    /**
     * <pre>
     * 转发消息内容
     * </pre>
     *
     * <code>ForwardMessageByContentTask = 1220;</code>
     */
    public static final int ForwardMessageByContentTask_VALUE = 1220;
    /**
     * <pre>
     * 手机端主动发出的交互类消息 
     * </pre>
     *
     * <code>FriendPushNotice = 2026;</code>
     */
    public static final int FriendPushNotice_VALUE = 2026;
    /**
     * <pre>
     * 手机端推送当前安装版本 4.51
     * </pre>
     *
     * <code>PostDeviceInfoNotice = 2027;</code>
     */
    public static final int PostDeviceInfoNotice_VALUE = 2027;
    /**
     * <pre>
     *手机端回传检测清粉好友数 4.52
     * </pre>
     *
     * <code>PostFriendDetectCountNotice = 2028;</code>
     */
    public static final int PostFriendDetectCountNotice_VALUE = 2028;
    /**
     * <pre>
     * 手机回传朋友圈数据 4.2.4
     * </pre>
     *
     * <code>CirclePushNotice = 2029;</code>
     */
    public static final int CirclePushNotice_VALUE = 2029;
    /**
     * <pre>
     * 手机回传朋友圈点赞数量 4.2.5
     * </pre>
     *
     * <code>PostMomentsPraiseCountNotice = 2030;</code>
     */
    public static final int PostMomentsPraiseCountNotice_VALUE = 2030;
    /**
     * <pre>
     * 手机端推送群聊列表
     * </pre>
     *
     * <code>ChatroomPushNotice = 2031;</code>
     */
    public static final int ChatroomPushNotice_VALUE = 2031;
    /**
     * <pre>
     * 手机端推送标签列表
     * </pre>
     *
     * <code>ContactLabelInfoNotice = 2032;</code>
     */
    public static final int ContactLabelInfoNotice_VALUE = 2032;
    /**
     * <pre>
     * 推送历史消息
     * </pre>
     *
     * <code>HistoryMsgPushNotice = 2033;</code>
     */
    public static final int HistoryMsgPushNotice_VALUE = 2033;
    /**
     * <pre>
     * 群成员（陌生人）信息
     * </pre>
     *
     * <code>ChatRoomMembersNotice = 2034;</code>
     */
    public static final int ChatRoomMembersNotice_VALUE = 2034;
    /**
     * <pre>
     * 客服客户端主动发出的交互类消息 与手机端无关 
     * </pre>
     *
     * <code>GetWeChatsReq = 3050;</code>
     */
    public static final int GetWeChatsReq_VALUE = 3050;
    /**
     * <pre>
     *拉取当前微信个人号列表响应(立即) 4.82
     * </pre>
     *
     * <code>GetWeChatsRsp = 3051;</code>
     */
    public static final int GetWeChatsRsp_VALUE = 3051;
    /**
     * <pre>
     * 最近好友数据更改通知(服务器下发) 4.83
     * </pre>
     *
     * <code>RecentFriendChangeNotice = 3052;</code>
     */
    public static final int RecentFriendChangeNotice_VALUE = 3052;
    /**
     * <pre>
     * 今日接待数据更改通知(服务器下发) 4.84
     * </pre>
     *
     * <code>TodayFriendChangeNotice = 3053;</code>
     */
    public static final int TodayFriendChangeNotice_VALUE = 3053;
    /**
     * <pre>
     * 客户端退出通知 4.85
     * </pre>
     *
     * <code>AccountLogoutNotice = 3054;</code>
     */
    public static final int AccountLogoutNotice_VALUE = 3054;
    /**
     * <pre>
     * 客户端选择微信号登陆通知 4.86
     * </pre>
     *
     * <code>WeChatLoginNotice = 3055;</code>
     */
    public static final int WeChatLoginNotice_VALUE = 3055;
    /**
     * <pre>
     *PC客户端请求同步好友列表 4.87
     * </pre>
     *
     * <code>SyncFriendListAsyncReq = 3056;</code>
     */
    public static final int SyncFriendListAsyncReq_VALUE = 3056;
    /**
     * <pre>
     * 同步好友推送的数据模型 4.88
     * </pre>
     *
     * <code>SyncFriendListAsyncRsp = 3057;</code>
     */
    public static final int SyncFriendListAsyncRsp_VALUE = 3057;
    /**
     * <pre>
     * 同步最近聊天好友列表 4.89
     * </pre>
     *
     * <code>SyncRecentFriendListAsyncReq = 3058;</code>
     */
    public static final int SyncRecentFriendListAsyncReq_VALUE = 3058;
    /**
     * <pre>
     * 同步最近聊天好友响应（异步） 4.90
     * </pre>
     *
     * <code>SyncRecentFriendListAsyncRsp = 3059;</code>
     */
    public static final int SyncRecentFriendListAsyncRsp_VALUE = 3059;
    /**
     * <pre>
     * 同步今日接待好友列表请求 4.91
     * </pre>
     *
     * <code>SyncTodayFriendListAsyncReq = 3060;</code>
     */
    public static final int SyncTodayFriendListAsyncReq_VALUE = 3060;
    /**
     * <pre>
     * 同步今日接待好友响应（异步） 4.92
     * </pre>
     *
     * <code>SyncTodayFriendListAsyncRsp = 3061;</code>
     */
    public static final int SyncTodayFriendListAsyncRsp_VALUE = 3061;
    /**
     * <pre>
     * 同步好友消息数据请求 4.93
     * </pre>
     *
     * <code>SyncFriendMessageAsyncReq = 3062;</code>
     */
    public static final int SyncFriendMessageAsyncReq_VALUE = 3062;
    /**
     * <pre>
     * 同步好友消息数据响应（异步）4.94
     * </pre>
     *
     * <code>SyncFriendMessageAsyncRsp = 3063;</code>
     */
    public static final int SyncFriendMessageAsyncRsp_VALUE = 3063;
    /**
     * <pre>
     * TalkToFriendTask的即时响应(服务器下发) 4.95
     * </pre>
     *
     * <code>TalkToFriendTaskReceived = 3064;</code>
     */
    public static final int TalkToFriendTaskReceived_VALUE = 3064;
    /**
     * <pre>
     * 标记消息已读 4.96
     * </pre>
     *
     * <code>ReadChatMessageNotice = 3065;</code>
     */
    public static final int ReadChatMessageNotice_VALUE = 3065;
    /**
     * <pre>
     * 同步加好友请求 4.97
     * </pre>
     *
     * <code>SyncFriendAddReqeustAsyncReq = 3066;</code>
     */
    public static final int SyncFriendAddReqeustAsyncReq_VALUE = 3066;
    /**
     * <pre>
     * 同步加好友列表数据响应 4.98
     * </pre>
     *
     * <code>SyncFriendAddRequestAsyncRsp = 3067;</code>
     */
    public static final int SyncFriendAddRequestAsyncRsp_VALUE = 3067;
    /**
     * <pre>
     * 微信登出通知(服务器下发) 4.99
     * </pre>
     *
     * <code>WeChatForceOfflineNotice = 3068;</code>
     */
    public static final int WeChatForceOfflineNotice_VALUE = 3068;
    /**
     * <pre>
     * 快捷回复信息请求模型 4.100
     * </pre>
     *
     * <code>SyncQuickReplyAsyncReq = 3069;</code>
     */
    public static final int SyncQuickReplyAsyncReq_VALUE = 3069;
    /**
     * <pre>
     * 快捷回复信息响应 4.101
     * </pre>
     *
     * <code>SyncQuickReplyAsyncRsp = 3070;</code>
     */
    public static final int SyncQuickReplyAsyncRsp_VALUE = 3070;
    /**
     * <pre>
     * 快捷回复添加通知 4.102
     * </pre>
     *
     * <code>QuickReplyAddNotice = 3071;</code>
     */
    public static final int QuickReplyAddNotice_VALUE = 3071;
    /**
     * <pre>
     * 快捷回复添加被接受 4.103
     * </pre>
     *
     * <code>QuickReplyAddReceived = 3072;</code>
     */
    public static final int QuickReplyAddReceived_VALUE = 3072;
    /**
     * <pre>
     * 快捷回复删除通知 4.104
     * </pre>
     *
     * <code>QuickReplyDelNotice = 3073;</code>
     */
    public static final int QuickReplyDelNotice_VALUE = 3073;
    /**
     * <pre>
     * 获取标签分组请求数据 4.105
     * </pre>
     *
     * <code>GetTagGroupReq = 3074;</code>
     */
    public static final int GetTagGroupReq_VALUE = 3074;
    /**
     * <pre>
     * 获取标签分组数据响应数据 4.106
     * </pre>
     *
     * <code>GetTagGroupRsp = 3075;</code>
     */
    public static final int GetTagGroupRsp_VALUE = 3075;
    /**
     * <pre>
     * 获取标签下的好友数据请求 4.107
     * </pre>
     *
     * <code>GetTagFriendsReq = 3076;</code>
     */
    public static final int GetTagFriendsReq_VALUE = 3076;
    /**
     * <pre>
     * 获取标签下的好友数据响应 4.108
     * </pre>
     *
     * <code>GetTagFriendsRsp = 3077;</code>
     */
    public static final int GetTagFriendsRsp_VALUE = 3077;
    /**
     * <pre>
     * 微信在设备上上线通知 4.109
     * </pre>
     *
     * <code>WeChatForceOnlineNotice = 3078;</code>
     */
    public static final int WeChatForceOnlineNotice_VALUE = 3078;
    /**
     * <pre>
     * 删除最近聊天好友通知 4.110
     * </pre>
     *
     * <code>DeleteRecentFriendNotice = 3079;</code>
     */
    public static final int DeleteRecentFriendNotice_VALUE = 3079;
    /**
     * <pre>
     * 删除今日接待好友通知 4.111
     * </pre>
     *
     * <code>DeleteTodayFriendNotice = 3080;</code>
     */
    public static final int DeleteTodayFriendNotice_VALUE = 3080;
    /**
     * <pre>
     * 微信信息更改通知 4.112
     * </pre>
     *
     * <code>WeChatInfoChangeNotice = 3081;</code>
     */
    public static final int WeChatInfoChangeNotice_VALUE = 3081;
    /**
     * <pre>
     * 获取最后一个版本的请求 4.113
     * </pre>
     *
     * <code>GetLastestVersionReq = 3082;</code>
     */
    public static final int GetLastestVersionReq_VALUE = 3082;
    /**
     * <pre>
     * 获取最后一个版本的响应 4.114
     * </pre>
     *
     * <code>GetLastestVersionRsp = 3083;</code>
     */
    public static final int GetLastestVersionRsp_VALUE = 3083;
    /**
     * <pre>
     * 检测设备App版本请求 4.115
     * </pre>
     *
     * <code>CheckDeviceAppVersionReq = 3084;</code>
     */
    public static final int CheckDeviceAppVersionReq_VALUE = 3084;
    /**
     * <pre>
     * 检测设备App版本响应 4.116
     * </pre>
     *
     * <code>CheckDeviceAppVersionRsp = 3085;</code>
     */
    public static final int CheckDeviceAppVersionRsp_VALUE = 3085;
    /**
     * <pre>
     * 有新版本软件发布通知 4.117
     * </pre>
     *
     * <code>NewAppVersionPublishNotice = 3086;</code>
     */
    public static final int NewAppVersionPublishNotice_VALUE = 3086;
    /**
     * <pre>
     * 客户端上报客户端信息 4.201
     * </pre>
     *
     * <code>PostAppInfoReq = 3201;</code>
     */
    public static final int PostAppInfoReq_VALUE = 3201;
    /**
     * <pre>
     * 客户端上传日志 4.202
     * </pre>
     *
     * <code>PostLogReq = 3202;</code>
     */
    public static final int PostLogReq_VALUE = 3202;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumMsgType valueOf(int value) {
      return forNumber(value);
    }

    public static EnumMsgType forNumber(int value) {
      switch (value) {
        case 0: return UnknownMsg;
        case 1: return BrokerTransferTask;
        case 2: return DeviceAuthStatChangedBroadcast;
        case 3: return BrokerTransferTaskResult;
        case 1001: return HeartBeatReq;
        case 1002: return MsgReceivedAck;
        case 1003: return Error;
        case 1010: return DeviceAuthReq;
        case 1011: return DeviceAuthRsp;
        case 1012: return DeviceExitNotice;
        case 1013: return AccountForceOfflineNotice;
        case 1020: return WeChatOnlineNotice;
        case 1021: return WeChatOfflineNotice;
        case 1022: return FriendAddNotice;
        case 1023: return FriendDelNotice;
        case 1024: return FriendTalkNotice;
        case 1025: return TaskResultNotice;
        case 1026: return WeChatTalkToFriendNotice;
        case 1027: return FriendAddReqeustNotice;
        case 1028: return TalkToFriendTaskResultNotice;
        case 1029: return RequestTalkDetailTaskResultNotice;
        case 1030: return PullWeChatQrCodeTaskResultNotice;
        case 1031: return CircleNewPublishNotice;
        case 1032: return CircleDelNotice;
        case 1033: return CircleLikeNotice;
        case 1034: return CircleCommentNotice;
        case 1035: return PostMessageReadNotice;
        case 1036: return ContactsInfoNotice;
        case 1037: return ChatRoomAddNotice;
        case 1038: return ContactLabelAddNotice;
        case 1039: return TakeMoneyTaskResultNotice;
        case 1040: return CircleDetailNotice;
        case 1041: return ChatRoomDelNotice;
        case 1042: return ChatRoomChangedNotice;
        case 1043: return PullChatRoomQrCodeTaskResultNotice;
        case 1070: return TalkToFriendTask;
        case 1071: return PostSNSNewsTask;
        case 1072: return AddFriendsTask;
        case 1073: return PostSNSNewsTaskResultNotice;
        case 1074: return DeleteSNSNewsTask;
        case 1075: return AcceptFriendAddRequestTask;
        case 1076: return WeChatGroupSendTask;
        case 1077: return WeChatMaintenanceTask;
        case 1078: return RequestTalkDetailTask;
        case 1079: return PullWeChatQrCodeTask;
        case 1080: return TriggerFriendPushTask;
        case 1081: return TriggerCirclePushTask;
        case 1082: return CircleCommentDeleteTask;
        case 1083: return CircleCommentDeleteTaskResultNotice;
        case 1084: return CircleCommentReplyTask;
        case 1085: return CircleCommentReplyTaskResultNotice;
        case 1086: return TriggerMessageReadTask;
        case 1087: return RevokeMessageTask;
        case 1088: return ForwardMessageTask;
        case 1089: return TriggerHistoryMsgPushTask;
        case 1090: return PullChatRoomQrCodeTask;
        case 1091: return PostDeviceReAllocTask;
        case 1092: return PostAccountOfflineTask;
        case 1093: return UpgradeAppNotice;
        case 1094: return UpgradeDeviceAppNotice;
        case 1095: return PostFriendDetectTask;
        case 1096: return PostStopFriendDetectTask;
        case 1097: return PostDeleteDeviceNotice;
        case 1098: return PostMomentsPraiseTask;
        case 1099: return PostStopMomentsPraiseTask;
        case 1100: return PostStopWeChatMaintenanceTask;
        case 1101: return ModifyFriendMemoTask;
        case 1200: return TakeLuckyMoneyTask;
        case 1201: return PullFriendCircleTask;
        case 1202: return PullCircleDetailTask;
        case 1203: return CircleLikeTask;
        case 1210: return TriggerChatroomPushTask;
        case 1211: return RequestChatRoomInfoTask;
        case 1212: return RequestContactsInfoTask;
        case 1213: return ChatRoomActionTask;
        case 1214: return AddFriendInChatRoomTask;
        case 1215: return AddFriendFromPhonebookTask;
        case 1216: return DeleteFriendTask;
        case 1217: return SendLuckyMoneyTask;
        case 1218: return RequestTalkContentTask;
        case 1219: return RequestTalkContentTaskResultNotice;
        case 1220: return ForwardMessageByContentTask;
        case 2026: return FriendPushNotice;
        case 2027: return PostDeviceInfoNotice;
        case 2028: return PostFriendDetectCountNotice;
        case 2029: return CirclePushNotice;
        case 2030: return PostMomentsPraiseCountNotice;
        case 2031: return ChatroomPushNotice;
        case 2032: return ContactLabelInfoNotice;
        case 2033: return HistoryMsgPushNotice;
        case 2034: return ChatRoomMembersNotice;
        case 3050: return GetWeChatsReq;
        case 3051: return GetWeChatsRsp;
        case 3052: return RecentFriendChangeNotice;
        case 3053: return TodayFriendChangeNotice;
        case 3054: return AccountLogoutNotice;
        case 3055: return WeChatLoginNotice;
        case 3056: return SyncFriendListAsyncReq;
        case 3057: return SyncFriendListAsyncRsp;
        case 3058: return SyncRecentFriendListAsyncReq;
        case 3059: return SyncRecentFriendListAsyncRsp;
        case 3060: return SyncTodayFriendListAsyncReq;
        case 3061: return SyncTodayFriendListAsyncRsp;
        case 3062: return SyncFriendMessageAsyncReq;
        case 3063: return SyncFriendMessageAsyncRsp;
        case 3064: return TalkToFriendTaskReceived;
        case 3065: return ReadChatMessageNotice;
        case 3066: return SyncFriendAddReqeustAsyncReq;
        case 3067: return SyncFriendAddRequestAsyncRsp;
        case 3068: return WeChatForceOfflineNotice;
        case 3069: return SyncQuickReplyAsyncReq;
        case 3070: return SyncQuickReplyAsyncRsp;
        case 3071: return QuickReplyAddNotice;
        case 3072: return QuickReplyAddReceived;
        case 3073: return QuickReplyDelNotice;
        case 3074: return GetTagGroupReq;
        case 3075: return GetTagGroupRsp;
        case 3076: return GetTagFriendsReq;
        case 3077: return GetTagFriendsRsp;
        case 3078: return WeChatForceOnlineNotice;
        case 3079: return DeleteRecentFriendNotice;
        case 3080: return DeleteTodayFriendNotice;
        case 3081: return WeChatInfoChangeNotice;
        case 3082: return GetLastestVersionReq;
        case 3083: return GetLastestVersionRsp;
        case 3084: return CheckDeviceAppVersionReq;
        case 3085: return CheckDeviceAppVersionRsp;
        case 3086: return NewAppVersionPublishNotice;
        case 3201: return PostAppInfoReq;
        case 3202: return PostLogReq;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumMsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumMsgType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumMsgType>() {
            public EnumMsgType findValueByNumber(int number) {
              return EnumMsgType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final EnumMsgType[] VALUES = values();

    public static EnumMsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumMsgType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Jubo.JuLiao.IM.Wx.Proto.EnumMsgType)
  }

  /**
   * <pre>
   * 全局错误码表
   * </pre>
   *
   * Protobuf enum {@code Jubo.JuLiao.IM.Wx.Proto.EnumErrorCode}
   */
  public enum EnumErrorCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *无错误
     * </pre>
     *
     * <code>Success = 0;</code>
     */
    Success(0),
    /**
     * <pre>
     *无权限
     * </pre>
     *
     * <code>NoRight = 1001;</code>
     */
    NoRight(1001),
    /**
     * <pre>
     *数据信息不合法
     * </pre>
     *
     * <code>InvalidParam = 1002;</code>
     */
    InvalidParam(1002),
    /**
     * <pre>
     *内部处理错误
     * </pre>
     *
     * <code>InternalError = 1003;</code>
     */
    InternalError(1003),
    /**
     * <pre>
     *发送消息或指令时对方不在线
     * </pre>
     *
     * <code>TargetNotOnline = 1004;</code>
     */
    TargetNotOnline(1004),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *无错误
     * </pre>
     *
     * <code>Success = 0;</code>
     */
    public static final int Success_VALUE = 0;
    /**
     * <pre>
     *无权限
     * </pre>
     *
     * <code>NoRight = 1001;</code>
     */
    public static final int NoRight_VALUE = 1001;
    /**
     * <pre>
     *数据信息不合法
     * </pre>
     *
     * <code>InvalidParam = 1002;</code>
     */
    public static final int InvalidParam_VALUE = 1002;
    /**
     * <pre>
     *内部处理错误
     * </pre>
     *
     * <code>InternalError = 1003;</code>
     */
    public static final int InternalError_VALUE = 1003;
    /**
     * <pre>
     *发送消息或指令时对方不在线
     * </pre>
     *
     * <code>TargetNotOnline = 1004;</code>
     */
    public static final int TargetNotOnline_VALUE = 1004;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumErrorCode valueOf(int value) {
      return forNumber(value);
    }

    public static EnumErrorCode forNumber(int value) {
      switch (value) {
        case 0: return Success;
        case 1001: return NoRight;
        case 1002: return InvalidParam;
        case 1003: return InternalError;
        case 1004: return TargetNotOnline;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumErrorCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumErrorCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumErrorCode>() {
            public EnumErrorCode findValueByNumber(int number) {
              return EnumErrorCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.getDescriptor().getEnumTypes().get(1);
    }

    private static final EnumErrorCode[] VALUES = values();

    public static EnumErrorCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumErrorCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Jubo.JuLiao.IM.Wx.Proto.EnumErrorCode)
  }

  /**
   * <pre>
   * 性别枚举
   * </pre>
   *
   * Protobuf enum {@code Jubo.JuLiao.IM.Wx.Proto.EnumGender}
   */
  public enum EnumGender
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *未知
     * </pre>
     *
     * <code>UnknownGender = 0;</code>
     */
    UnknownGender(0),
    /**
     * <pre>
     *男
     * </pre>
     *
     * <code>Male = 1;</code>
     */
    Male(1),
    /**
     * <pre>
     *女
     * </pre>
     *
     * <code>Female = 2;</code>
     */
    Female(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *未知
     * </pre>
     *
     * <code>UnknownGender = 0;</code>
     */
    public static final int UnknownGender_VALUE = 0;
    /**
     * <pre>
     *男
     * </pre>
     *
     * <code>Male = 1;</code>
     */
    public static final int Male_VALUE = 1;
    /**
     * <pre>
     *女
     * </pre>
     *
     * <code>Female = 2;</code>
     */
    public static final int Female_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumGender valueOf(int value) {
      return forNumber(value);
    }

    public static EnumGender forNumber(int value) {
      switch (value) {
        case 0: return UnknownGender;
        case 1: return Male;
        case 2: return Female;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumGender>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumGender> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumGender>() {
            public EnumGender findValueByNumber(int number) {
              return EnumGender.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.getDescriptor().getEnumTypes().get(2);
    }

    private static final EnumGender[] VALUES = values();

    public static EnumGender valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumGender(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Jubo.JuLiao.IM.Wx.Proto.EnumGender)
  }

  /**
   * <pre>
   * 聊天内容类型
   * </pre>
   *
   * Protobuf enum {@code Jubo.JuLiao.IM.Wx.Proto.EnumContentType}
   */
  public enum EnumContentType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知内容
     * </pre>
     *
     * <code>UnknownContent = 0;</code>
     */
    UnknownContent(0),
    /**
     * <pre>
     * 文本内容
     * </pre>
     *
     * <code>Text = 1;</code>
     */
    Text(1),
    /**
     * <pre>
     * 图片消息
     * </pre>
     *
     * <code>Picture = 2;</code>
     */
    Picture(2),
    /**
     * <pre>
     * 语音消息
     * </pre>
     *
     * <code>Voice = 3;</code>
     */
    Voice(3),
    /**
     * <pre>
     * 视频消息
     * </pre>
     *
     * <code>Video = 4;</code>
     */
    Video(4),
    /**
     * <pre>
     *系统消息
     * </pre>
     *
     * <code>System = 5;</code>
     */
    System(5),
    /**
     * <pre>
     * 链接消息
     * </pre>
     *
     * <code>Link = 6;</code>
     */
    Link(6),
    /**
     * <pre>
     * 扩展的链接消息（小程序分享等），内容为xml格式，暂未使用
     * </pre>
     *
     * <code>LinkExt = 7;</code>
     */
    LinkExt(7),
    /**
     * <pre>
     * 文件发送
     * </pre>
     *
     * <code>File = 8;</code>
     */
    File(8),
    /**
     * <pre>
     * 名片
     * </pre>
     *
     * <code>NameCard = 9;</code>
     */
    NameCard(9),
    /**
     * <pre>
     * 位置信息
     * </pre>
     *
     * <code>Location = 10;</code>
     */
    Location(10),
    /**
     * <pre>
     * 红包
     * </pre>
     *
     * <code>LuckyMoney = 11;</code>
     */
    LuckyMoney(11),
    /**
     * <pre>
     * 转账
     * </pre>
     *
     * <code>MoneyTrans = 12;</code>
     */
    MoneyTrans(12),
    /**
     * <pre>
     * 小程序
     * </pre>
     *
     * <code>WeApp = 13;</code>
     */
    WeApp(13),
    /**
     * <pre>
     * 不支持的消息
     * </pre>
     *
     * <code>UnSupport = 99;</code>
     */
    UnSupport(99),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知内容
     * </pre>
     *
     * <code>UnknownContent = 0;</code>
     */
    public static final int UnknownContent_VALUE = 0;
    /**
     * <pre>
     * 文本内容
     * </pre>
     *
     * <code>Text = 1;</code>
     */
    public static final int Text_VALUE = 1;
    /**
     * <pre>
     * 图片消息
     * </pre>
     *
     * <code>Picture = 2;</code>
     */
    public static final int Picture_VALUE = 2;
    /**
     * <pre>
     * 语音消息
     * </pre>
     *
     * <code>Voice = 3;</code>
     */
    public static final int Voice_VALUE = 3;
    /**
     * <pre>
     * 视频消息
     * </pre>
     *
     * <code>Video = 4;</code>
     */
    public static final int Video_VALUE = 4;
    /**
     * <pre>
     *系统消息
     * </pre>
     *
     * <code>System = 5;</code>
     */
    public static final int System_VALUE = 5;
    /**
     * <pre>
     * 链接消息
     * </pre>
     *
     * <code>Link = 6;</code>
     */
    public static final int Link_VALUE = 6;
    /**
     * <pre>
     * 扩展的链接消息（小程序分享等），内容为xml格式，暂未使用
     * </pre>
     *
     * <code>LinkExt = 7;</code>
     */
    public static final int LinkExt_VALUE = 7;
    /**
     * <pre>
     * 文件发送
     * </pre>
     *
     * <code>File = 8;</code>
     */
    public static final int File_VALUE = 8;
    /**
     * <pre>
     * 名片
     * </pre>
     *
     * <code>NameCard = 9;</code>
     */
    public static final int NameCard_VALUE = 9;
    /**
     * <pre>
     * 位置信息
     * </pre>
     *
     * <code>Location = 10;</code>
     */
    public static final int Location_VALUE = 10;
    /**
     * <pre>
     * 红包
     * </pre>
     *
     * <code>LuckyMoney = 11;</code>
     */
    public static final int LuckyMoney_VALUE = 11;
    /**
     * <pre>
     * 转账
     * </pre>
     *
     * <code>MoneyTrans = 12;</code>
     */
    public static final int MoneyTrans_VALUE = 12;
    /**
     * <pre>
     * 小程序
     * </pre>
     *
     * <code>WeApp = 13;</code>
     */
    public static final int WeApp_VALUE = 13;
    /**
     * <pre>
     * 不支持的消息
     * </pre>
     *
     * <code>UnSupport = 99;</code>
     */
    public static final int UnSupport_VALUE = 99;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumContentType valueOf(int value) {
      return forNumber(value);
    }

    public static EnumContentType forNumber(int value) {
      switch (value) {
        case 0: return UnknownContent;
        case 1: return Text;
        case 2: return Picture;
        case 3: return Voice;
        case 4: return Video;
        case 5: return System;
        case 6: return Link;
        case 7: return LinkExt;
        case 8: return File;
        case 9: return NameCard;
        case 10: return Location;
        case 11: return LuckyMoney;
        case 12: return MoneyTrans;
        case 13: return WeApp;
        case 99: return UnSupport;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumContentType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumContentType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumContentType>() {
            public EnumContentType findValueByNumber(int number) {
              return EnumContentType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.getDescriptor().getEnumTypes().get(3);
    }

    private static final EnumContentType[] VALUES = values();

    public static EnumContentType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumContentType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Jubo.JuLiao.IM.Wx.Proto.EnumContentType)
  }

  /**
   * <pre>
   * 设备 ~ 微信号 在线状态枚举
   * </pre>
   *
   * Protobuf enum {@code Jubo.JuLiao.IM.Wx.Proto.EnumOnlineState}
   */
  public enum EnumOnlineState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知，在条件中可认为是全部
     * </pre>
     *
     * <code>UnknownState = 0;</code>
     */
    UnknownState(0),
    /**
     * <pre>
     * 在线
     * </pre>
     *
     * <code>Online = 1;</code>
     */
    Online(1),
    /**
     * <pre>
     * 离线
     * </pre>
     *
     * <code>Offline = 2;</code>
     */
    Offline(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知，在条件中可认为是全部
     * </pre>
     *
     * <code>UnknownState = 0;</code>
     */
    public static final int UnknownState_VALUE = 0;
    /**
     * <pre>
     * 在线
     * </pre>
     *
     * <code>Online = 1;</code>
     */
    public static final int Online_VALUE = 1;
    /**
     * <pre>
     * 离线
     * </pre>
     *
     * <code>Offline = 2;</code>
     */
    public static final int Offline_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumOnlineState valueOf(int value) {
      return forNumber(value);
    }

    public static EnumOnlineState forNumber(int value) {
      switch (value) {
        case 0: return UnknownState;
        case 1: return Online;
        case 2: return Offline;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumOnlineState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumOnlineState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumOnlineState>() {
            public EnumOnlineState findValueByNumber(int number) {
              return EnumOnlineState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.getDescriptor().getEnumTypes().get(4);
    }

    private static final EnumOnlineState[] VALUES = values();

    public static EnumOnlineState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumOnlineState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Jubo.JuLiao.IM.Wx.Proto.EnumOnlineState)
  }

  /**
   * <pre>
   * 任务类型
   * </pre>
   *
   * Protobuf enum {@code Jubo.JuLiao.IM.Wx.Proto.EnumTaskType}
   */
  public enum EnumTaskType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知，不应该出现，但是协议需要
     * </pre>
     *
     * <code>UnknownTask = 0;</code>
     */
    UnknownTask(0),
    /**
     * <pre>
     * 阅读腾讯新闻
     * </pre>
     *
     * <code>ReadTencentNews = 1;</code>
     */
    ReadTencentNews(1),
    /**
     * <pre>
     * 阅读公众号文章
     * </pre>
     *
     * <code>ReadMPArticles = 2;</code>
     */
    ReadMPArticles(2),
    /**
     * <pre>
     * 阅读看一看文章
     * </pre>
     *
     * <code>ReadKYKArticles = 3;</code>
     */
    ReadKYKArticles(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知，不应该出现，但是协议需要
     * </pre>
     *
     * <code>UnknownTask = 0;</code>
     */
    public static final int UnknownTask_VALUE = 0;
    /**
     * <pre>
     * 阅读腾讯新闻
     * </pre>
     *
     * <code>ReadTencentNews = 1;</code>
     */
    public static final int ReadTencentNews_VALUE = 1;
    /**
     * <pre>
     * 阅读公众号文章
     * </pre>
     *
     * <code>ReadMPArticles = 2;</code>
     */
    public static final int ReadMPArticles_VALUE = 2;
    /**
     * <pre>
     * 阅读看一看文章
     * </pre>
     *
     * <code>ReadKYKArticles = 3;</code>
     */
    public static final int ReadKYKArticles_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumTaskType valueOf(int value) {
      return forNumber(value);
    }

    public static EnumTaskType forNumber(int value) {
      switch (value) {
        case 0: return UnknownTask;
        case 1: return ReadTencentNews;
        case 2: return ReadMPArticles;
        case 3: return ReadKYKArticles;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumTaskType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumTaskType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumTaskType>() {
            public EnumTaskType findValueByNumber(int number) {
              return EnumTaskType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.getDescriptor().getEnumTypes().get(5);
    }

    private static final EnumTaskType[] VALUES = values();

    public static EnumTaskType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumTaskType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Jubo.JuLiao.IM.Wx.Proto.EnumTaskType)
  }

  /**
   * <pre>
   * 账号类型
   * </pre>
   *
   * Protobuf enum {@code Jubo.JuLiao.IM.Wx.Proto.EnumAccountType}
   */
  public enum EnumAccountType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownAccountType = 0;</code>
     */
    UnknownAccountType(0),
    /**
     * <pre>
     * 主账号
     * </pre>
     *
     * <code>Main = 1;</code>
     */
    Main(1),
    /**
     * <pre>
     * 子账号
     * </pre>
     *
     * <code>SubUser = 2;</code>
     */
    SubUser(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownAccountType = 0;</code>
     */
    public static final int UnknownAccountType_VALUE = 0;
    /**
     * <pre>
     * 主账号
     * </pre>
     *
     * <code>Main = 1;</code>
     */
    public static final int Main_VALUE = 1;
    /**
     * <pre>
     * 子账号
     * </pre>
     *
     * <code>SubUser = 2;</code>
     */
    public static final int SubUser_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumAccountType valueOf(int value) {
      return forNumber(value);
    }

    public static EnumAccountType forNumber(int value) {
      switch (value) {
        case 0: return UnknownAccountType;
        case 1: return Main;
        case 2: return SubUser;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumAccountType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumAccountType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumAccountType>() {
            public EnumAccountType findValueByNumber(int number) {
              return EnumAccountType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.getDescriptor().getEnumTypes().get(6);
    }

    private static final EnumAccountType[] VALUES = values();

    public static EnumAccountType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumAccountType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Jubo.JuLiao.IM.Wx.Proto.EnumAccountType)
  }

  /**
   * <pre>
   * 消息发送状态
   * </pre>
   *
   * Protobuf enum {@code Jubo.JuLiao.IM.Wx.Proto.EnumSendStatus}
   */
  public enum EnumSendStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 无状态
     * </pre>
     *
     * <code>NoAction = 0;</code>
     */
    NoAction(0),
    /**
     * <pre>
     * 发送中
     * </pre>
     *
     * <code>Sending = 1;</code>
     */
    Sending(1),
    /**
     * <pre>
     * 发送成功
     * </pre>
     *
     * <code>SendSuccess = 17;</code>
     */
    SendSuccess(17),
    /**
     * <pre>
     * 发送失败
     * </pre>
     *
     * <code>SendError = 16;</code>
     */
    SendError(16),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 无状态
     * </pre>
     *
     * <code>NoAction = 0;</code>
     */
    public static final int NoAction_VALUE = 0;
    /**
     * <pre>
     * 发送中
     * </pre>
     *
     * <code>Sending = 1;</code>
     */
    public static final int Sending_VALUE = 1;
    /**
     * <pre>
     * 发送成功
     * </pre>
     *
     * <code>SendSuccess = 17;</code>
     */
    public static final int SendSuccess_VALUE = 17;
    /**
     * <pre>
     * 发送失败
     * </pre>
     *
     * <code>SendError = 16;</code>
     */
    public static final int SendError_VALUE = 16;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumSendStatus valueOf(int value) {
      return forNumber(value);
    }

    public static EnumSendStatus forNumber(int value) {
      switch (value) {
        case 0: return NoAction;
        case 1: return Sending;
        case 17: return SendSuccess;
        case 16: return SendError;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumSendStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumSendStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumSendStatus>() {
            public EnumSendStatus findValueByNumber(int number) {
              return EnumSendStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.getDescriptor().getEnumTypes().get(7);
    }

    private static final EnumSendStatus[] VALUES = values();

    public static EnumSendStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumSendStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Jubo.JuLiao.IM.Wx.Proto.EnumSendStatus)
  }

  /**
   * <pre>
   *被强制下线的原因
   * </pre>
   *
   * Protobuf enum {@code Jubo.JuLiao.IM.Wx.Proto.EnumForceOfflineReason}
   */
  public enum EnumForceOfflineReason
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *就是要下线你 
     * </pre>
     *
     * <code>NoReason = 0;</code>
     */
    NoReason(0),
    /**
     * <pre>
     *别处登录挤下线了 
     * </pre>
     *
     * <code>FuckedByOtherAuthorizer = 1;</code>
     */
    FuckedByOtherAuthorizer(1),
    /**
     * <pre>
     * 被重新分配
     * </pre>
     *
     * <code>ByReAlloc = 2;</code>
     */
    ByReAlloc(2),
    /**
     * <pre>
     * 设备下线而下线
     * </pre>
     *
     * <code>ByDeviceOffline = 3;</code>
     */
    ByDeviceOffline(3),
    /**
     * <pre>
     * 微信主动下线
     * </pre>
     *
     * <code>ByWeChatOffline = 4;</code>
     */
    ByWeChatOffline(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *就是要下线你 
     * </pre>
     *
     * <code>NoReason = 0;</code>
     */
    public static final int NoReason_VALUE = 0;
    /**
     * <pre>
     *别处登录挤下线了 
     * </pre>
     *
     * <code>FuckedByOtherAuthorizer = 1;</code>
     */
    public static final int FuckedByOtherAuthorizer_VALUE = 1;
    /**
     * <pre>
     * 被重新分配
     * </pre>
     *
     * <code>ByReAlloc = 2;</code>
     */
    public static final int ByReAlloc_VALUE = 2;
    /**
     * <pre>
     * 设备下线而下线
     * </pre>
     *
     * <code>ByDeviceOffline = 3;</code>
     */
    public static final int ByDeviceOffline_VALUE = 3;
    /**
     * <pre>
     * 微信主动下线
     * </pre>
     *
     * <code>ByWeChatOffline = 4;</code>
     */
    public static final int ByWeChatOffline_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumForceOfflineReason valueOf(int value) {
      return forNumber(value);
    }

    public static EnumForceOfflineReason forNumber(int value) {
      switch (value) {
        case 0: return NoReason;
        case 1: return FuckedByOtherAuthorizer;
        case 2: return ByReAlloc;
        case 3: return ByDeviceOffline;
        case 4: return ByWeChatOffline;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumForceOfflineReason>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumForceOfflineReason> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumForceOfflineReason>() {
            public EnumForceOfflineReason findValueByNumber(int number) {
              return EnumForceOfflineReason.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.getDescriptor().getEnumTypes().get(8);
    }

    private static final EnumForceOfflineReason[] VALUES = values();

    public static EnumForceOfflineReason valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumForceOfflineReason(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Jubo.JuLiao.IM.Wx.Proto.EnumForceOfflineReason)
  }

  public interface TransportMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Jubo.JuLiao.IM.Wx.Proto.TransportMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *消息Id(发送方内保持自增),请求中传入，响应中传回相同值
     * </pre>
     *
     * <code>int64 Id = 1;</code>
     */
    long getId();

    /**
     * <pre>
     *设备通信token
     * </pre>
     *
     * <code>string AccessToken = 2;</code>
     */
    java.lang.String getAccessToken();
    /**
     * <pre>
     *设备通信token
     * </pre>
     *
     * <code>string AccessToken = 2;</code>
     */
    com.google.protobuf.ByteString
        getAccessTokenBytes();

    /**
     * <pre>
     *承载的具体消息类型
     * </pre>
     *
     * <code>.Jubo.JuLiao.IM.Wx.Proto.EnumMsgType MsgType = 3;</code>
     */
    int getMsgTypeValue();
    /**
     * <pre>
     *承载的具体消息类型
     * </pre>
     *
     * <code>.Jubo.JuLiao.IM.Wx.Proto.EnumMsgType MsgType = 3;</code>
     */
    Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType getMsgType();

    /**
     * <pre>
     *具体的消息数据
     * </pre>
     *
     * <code>.google.protobuf.Any Content = 4;</code>
     */
    boolean hasContent();
    /**
     * <pre>
     *具体的消息数据
     * </pre>
     *
     * <code>.google.protobuf.Any Content = 4;</code>
     */
    com.google.protobuf.Any getContent();
    /**
     * <pre>
     *具体的消息数据
     * </pre>
     *
     * <code>.google.protobuf.Any Content = 4;</code>
     */
    com.google.protobuf.AnyOrBuilder getContentOrBuilder();

    /**
     * <pre>
     *如果是针对某个消息的响应，这里写对应请求的id
     * </pre>
     *
     * <code>int64 RefMessageId = 5;</code>
     */
    long getRefMessageId();
  }
  /**
   * <pre>
   *根传输消息
   * </pre>
   *
   * Protobuf type {@code Jubo.JuLiao.IM.Wx.Proto.TransportMessage}
   */
  public  static final class TransportMessage extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Jubo.JuLiao.IM.Wx.Proto.TransportMessage)
      TransportMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TransportMessage.newBuilder() to construct.
    private TransportMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TransportMessage() {
      id_ = 0L;
      accessToken_ = "";
      msgType_ = 0;
      refMessageId_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TransportMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              id_ = input.readInt64();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              accessToken_ = s;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              msgType_ = rawValue;
              break;
            }
            case 34: {
              com.google.protobuf.Any.Builder subBuilder = null;
              if (content_ != null) {
                subBuilder = content_.toBuilder();
              }
              content_ = input.readMessage(com.google.protobuf.Any.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(content_);
                content_ = subBuilder.buildPartial();
              }

              break;
            }
            case 40: {

              refMessageId_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.internal_static_Jubo_JuLiao_IM_Wx_Proto_TransportMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.internal_static_Jubo_JuLiao_IM_Wx_Proto_TransportMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage.class, Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <pre>
     *消息Id(发送方内保持自增),请求中传入，响应中传回相同值
     * </pre>
     *
     * <code>int64 Id = 1;</code>
     */
    public long getId() {
      return id_;
    }

    public static final int ACCESSTOKEN_FIELD_NUMBER = 2;
    private volatile java.lang.Object accessToken_;
    /**
     * <pre>
     *设备通信token
     * </pre>
     *
     * <code>string AccessToken = 2;</code>
     */
    public java.lang.String getAccessToken() {
      java.lang.Object ref = accessToken_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        accessToken_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *设备通信token
     * </pre>
     *
     * <code>string AccessToken = 2;</code>
     */
    public com.google.protobuf.ByteString
        getAccessTokenBytes() {
      java.lang.Object ref = accessToken_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        accessToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MSGTYPE_FIELD_NUMBER = 3;
    private int msgType_;
    /**
     * <pre>
     *承载的具体消息类型
     * </pre>
     *
     * <code>.Jubo.JuLiao.IM.Wx.Proto.EnumMsgType MsgType = 3;</code>
     */
    public int getMsgTypeValue() {
      return msgType_;
    }
    /**
     * <pre>
     *承载的具体消息类型
     * </pre>
     *
     * <code>.Jubo.JuLiao.IM.Wx.Proto.EnumMsgType MsgType = 3;</code>
     */
    public Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType getMsgType() {
      Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType result = Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType.valueOf(msgType_);
      return result == null ? Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType.UNRECOGNIZED : result;
    }

    public static final int CONTENT_FIELD_NUMBER = 4;
    private com.google.protobuf.Any content_;
    /**
     * <pre>
     *具体的消息数据
     * </pre>
     *
     * <code>.google.protobuf.Any Content = 4;</code>
     */
    public boolean hasContent() {
      return content_ != null;
    }
    /**
     * <pre>
     *具体的消息数据
     * </pre>
     *
     * <code>.google.protobuf.Any Content = 4;</code>
     */
    public com.google.protobuf.Any getContent() {
      return content_ == null ? com.google.protobuf.Any.getDefaultInstance() : content_;
    }
    /**
     * <pre>
     *具体的消息数据
     * </pre>
     *
     * <code>.google.protobuf.Any Content = 4;</code>
     */
    public com.google.protobuf.AnyOrBuilder getContentOrBuilder() {
      return getContent();
    }

    public static final int REFMESSAGEID_FIELD_NUMBER = 5;
    private long refMessageId_;
    /**
     * <pre>
     *如果是针对某个消息的响应，这里写对应请求的id
     * </pre>
     *
     * <code>int64 RefMessageId = 5;</code>
     */
    public long getRefMessageId() {
      return refMessageId_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != 0L) {
        output.writeInt64(1, id_);
      }
      if (!getAccessTokenBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, accessToken_);
      }
      if (msgType_ != Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType.UnknownMsg.getNumber()) {
        output.writeEnum(3, msgType_);
      }
      if (content_ != null) {
        output.writeMessage(4, getContent());
      }
      if (refMessageId_ != 0L) {
        output.writeInt64(5, refMessageId_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, id_);
      }
      if (!getAccessTokenBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, accessToken_);
      }
      if (msgType_ != Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType.UnknownMsg.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, msgType_);
      }
      if (content_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getContent());
      }
      if (refMessageId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, refMessageId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage)) {
        return super.equals(obj);
      }
      Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage other = (Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage) obj;

      boolean result = true;
      result = result && (getId()
          == other.getId());
      result = result && getAccessToken()
          .equals(other.getAccessToken());
      result = result && msgType_ == other.msgType_;
      result = result && (hasContent() == other.hasContent());
      if (hasContent()) {
        result = result && getContent()
            .equals(other.getContent());
      }
      result = result && (getRefMessageId()
          == other.getRefMessageId());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getId());
      hash = (37 * hash) + ACCESSTOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getAccessToken().hashCode();
      hash = (37 * hash) + MSGTYPE_FIELD_NUMBER;
      hash = (53 * hash) + msgType_;
      if (hasContent()) {
        hash = (37 * hash) + CONTENT_FIELD_NUMBER;
        hash = (53 * hash) + getContent().hashCode();
      }
      hash = (37 * hash) + REFMESSAGEID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getRefMessageId());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *根传输消息
     * </pre>
     *
     * Protobuf type {@code Jubo.JuLiao.IM.Wx.Proto.TransportMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Jubo.JuLiao.IM.Wx.Proto.TransportMessage)
        Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.internal_static_Jubo_JuLiao_IM_Wx_Proto_TransportMessage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.internal_static_Jubo_JuLiao_IM_Wx_Proto_TransportMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage.class, Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage.Builder.class);
      }

      // Construct using Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        id_ = 0L;

        accessToken_ = "";

        msgType_ = 0;

        if (contentBuilder_ == null) {
          content_ = null;
        } else {
          content_ = null;
          contentBuilder_ = null;
        }
        refMessageId_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.internal_static_Jubo_JuLiao_IM_Wx_Proto_TransportMessage_descriptor;
      }

      public Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage getDefaultInstanceForType() {
        return Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage.getDefaultInstance();
      }

      public Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage build() {
        Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage buildPartial() {
        Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage result = new Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage(this);
        result.id_ = id_;
        result.accessToken_ = accessToken_;
        result.msgType_ = msgType_;
        if (contentBuilder_ == null) {
          result.content_ = content_;
        } else {
          result.content_ = contentBuilder_.build();
        }
        result.refMessageId_ = refMessageId_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage) {
          return mergeFrom((Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage other) {
        if (other == Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage.getDefaultInstance()) return this;
        if (other.getId() != 0L) {
          setId(other.getId());
        }
        if (!other.getAccessToken().isEmpty()) {
          accessToken_ = other.accessToken_;
          onChanged();
        }
        if (other.msgType_ != 0) {
          setMsgTypeValue(other.getMsgTypeValue());
        }
        if (other.hasContent()) {
          mergeContent(other.getContent());
        }
        if (other.getRefMessageId() != 0L) {
          setRefMessageId(other.getRefMessageId());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long id_ ;
      /**
       * <pre>
       *消息Id(发送方内保持自增),请求中传入，响应中传回相同值
       * </pre>
       *
       * <code>int64 Id = 1;</code>
       */
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       *消息Id(发送方内保持自增),请求中传入，响应中传回相同值
       * </pre>
       *
       * <code>int64 Id = 1;</code>
       */
      public Builder setId(long value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *消息Id(发送方内保持自增),请求中传入，响应中传回相同值
       * </pre>
       *
       * <code>int64 Id = 1;</code>
       */
      public Builder clearId() {
        
        id_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object accessToken_ = "";
      /**
       * <pre>
       *设备通信token
       * </pre>
       *
       * <code>string AccessToken = 2;</code>
       */
      public java.lang.String getAccessToken() {
        java.lang.Object ref = accessToken_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          accessToken_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *设备通信token
       * </pre>
       *
       * <code>string AccessToken = 2;</code>
       */
      public com.google.protobuf.ByteString
          getAccessTokenBytes() {
        java.lang.Object ref = accessToken_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          accessToken_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *设备通信token
       * </pre>
       *
       * <code>string AccessToken = 2;</code>
       */
      public Builder setAccessToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        accessToken_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *设备通信token
       * </pre>
       *
       * <code>string AccessToken = 2;</code>
       */
      public Builder clearAccessToken() {
        
        accessToken_ = getDefaultInstance().getAccessToken();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *设备通信token
       * </pre>
       *
       * <code>string AccessToken = 2;</code>
       */
      public Builder setAccessTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        accessToken_ = value;
        onChanged();
        return this;
      }

      private int msgType_ = 0;
      /**
       * <pre>
       *承载的具体消息类型
       * </pre>
       *
       * <code>.Jubo.JuLiao.IM.Wx.Proto.EnumMsgType MsgType = 3;</code>
       */
      public int getMsgTypeValue() {
        return msgType_;
      }
      /**
       * <pre>
       *承载的具体消息类型
       * </pre>
       *
       * <code>.Jubo.JuLiao.IM.Wx.Proto.EnumMsgType MsgType = 3;</code>
       */
      public Builder setMsgTypeValue(int value) {
        msgType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *承载的具体消息类型
       * </pre>
       *
       * <code>.Jubo.JuLiao.IM.Wx.Proto.EnumMsgType MsgType = 3;</code>
       */
      public Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType getMsgType() {
        Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType result = Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType.valueOf(msgType_);
        return result == null ? Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *承载的具体消息类型
       * </pre>
       *
       * <code>.Jubo.JuLiao.IM.Wx.Proto.EnumMsgType MsgType = 3;</code>
       */
      public Builder setMsgType(Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.EnumMsgType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        msgType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *承载的具体消息类型
       * </pre>
       *
       * <code>.Jubo.JuLiao.IM.Wx.Proto.EnumMsgType MsgType = 3;</code>
       */
      public Builder clearMsgType() {
        
        msgType_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Any content_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> contentBuilder_;
      /**
       * <pre>
       *具体的消息数据
       * </pre>
       *
       * <code>.google.protobuf.Any Content = 4;</code>
       */
      public boolean hasContent() {
        return contentBuilder_ != null || content_ != null;
      }
      /**
       * <pre>
       *具体的消息数据
       * </pre>
       *
       * <code>.google.protobuf.Any Content = 4;</code>
       */
      public com.google.protobuf.Any getContent() {
        if (contentBuilder_ == null) {
          return content_ == null ? com.google.protobuf.Any.getDefaultInstance() : content_;
        } else {
          return contentBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *具体的消息数据
       * </pre>
       *
       * <code>.google.protobuf.Any Content = 4;</code>
       */
      public Builder setContent(com.google.protobuf.Any value) {
        if (contentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          content_ = value;
          onChanged();
        } else {
          contentBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *具体的消息数据
       * </pre>
       *
       * <code>.google.protobuf.Any Content = 4;</code>
       */
      public Builder setContent(
          com.google.protobuf.Any.Builder builderForValue) {
        if (contentBuilder_ == null) {
          content_ = builderForValue.build();
          onChanged();
        } else {
          contentBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *具体的消息数据
       * </pre>
       *
       * <code>.google.protobuf.Any Content = 4;</code>
       */
      public Builder mergeContent(com.google.protobuf.Any value) {
        if (contentBuilder_ == null) {
          if (content_ != null) {
            content_ =
              com.google.protobuf.Any.newBuilder(content_).mergeFrom(value).buildPartial();
          } else {
            content_ = value;
          }
          onChanged();
        } else {
          contentBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *具体的消息数据
       * </pre>
       *
       * <code>.google.protobuf.Any Content = 4;</code>
       */
      public Builder clearContent() {
        if (contentBuilder_ == null) {
          content_ = null;
          onChanged();
        } else {
          content_ = null;
          contentBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *具体的消息数据
       * </pre>
       *
       * <code>.google.protobuf.Any Content = 4;</code>
       */
      public com.google.protobuf.Any.Builder getContentBuilder() {
        
        onChanged();
        return getContentFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *具体的消息数据
       * </pre>
       *
       * <code>.google.protobuf.Any Content = 4;</code>
       */
      public com.google.protobuf.AnyOrBuilder getContentOrBuilder() {
        if (contentBuilder_ != null) {
          return contentBuilder_.getMessageOrBuilder();
        } else {
          return content_ == null ?
              com.google.protobuf.Any.getDefaultInstance() : content_;
        }
      }
      /**
       * <pre>
       *具体的消息数据
       * </pre>
       *
       * <code>.google.protobuf.Any Content = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
          getContentFieldBuilder() {
        if (contentBuilder_ == null) {
          contentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                  getContent(),
                  getParentForChildren(),
                  isClean());
          content_ = null;
        }
        return contentBuilder_;
      }

      private long refMessageId_ ;
      /**
       * <pre>
       *如果是针对某个消息的响应，这里写对应请求的id
       * </pre>
       *
       * <code>int64 RefMessageId = 5;</code>
       */
      public long getRefMessageId() {
        return refMessageId_;
      }
      /**
       * <pre>
       *如果是针对某个消息的响应，这里写对应请求的id
       * </pre>
       *
       * <code>int64 RefMessageId = 5;</code>
       */
      public Builder setRefMessageId(long value) {
        
        refMessageId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *如果是针对某个消息的响应，这里写对应请求的id
       * </pre>
       *
       * <code>int64 RefMessageId = 5;</code>
       */
      public Builder clearRefMessageId() {
        
        refMessageId_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Jubo.JuLiao.IM.Wx.Proto.TransportMessage)
    }

    // @@protoc_insertion_point(class_scope:Jubo.JuLiao.IM.Wx.Proto.TransportMessage)
    private static final Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage();
    }

    public static Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TransportMessage>
        PARSER = new com.google.protobuf.AbstractParser<TransportMessage>() {
      public TransportMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TransportMessage(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TransportMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TransportMessage> getParserForType() {
      return PARSER;
    }

    public Jubo.JuLiao.IM.Wx.Proto.TransportMessageOuterClass.TransportMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Jubo_JuLiao_IM_Wx_Proto_TransportMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Jubo_JuLiao_IM_Wx_Proto_TransportMessage_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026TransportMessage.proto\022\027Jubo.JuLiao.IM" +
      ".Wx.Proto\032\031google/protobuf/any.proto\"\247\001\n" +
      "\020TransportMessage\022\n\n\002Id\030\001 \001(\003\022\023\n\013AccessT" +
      "oken\030\002 \001(\t\0225\n\007MsgType\030\003 \001(\0162$.Jubo.JuLia" +
      "o.IM.Wx.Proto.EnumMsgType\022%\n\007Content\030\004 \001" +
      "(\0132\024.google.protobuf.Any\022\024\n\014RefMessageId" +
      "\030\005 \001(\003*\273\034\n\013EnumMsgType\022\016\n\nUnknownMsg\020\000\022\026" +
      "\n\022BrokerTransferTask\020\001\022\"\n\036DeviceAuthStat" +
      "ChangedBroadcast\020\002\022\034\n\030BrokerTransferTask" +
      "Result\020\003\022\021\n\014HeartBeatReq\020\351\007\022\023\n\016MsgReceiv" +
      "edAck\020\352\007\022\n\n\005Error\020\353\007\022\022\n\rDeviceAuthReq\020\362\007" +
      "\022\022\n\rDeviceAuthRsp\020\363\007\022\025\n\020DeviceExitNotice" +
      "\020\364\007\022\036\n\031AccountForceOfflineNotice\020\365\007\022\027\n\022W" +
      "eChatOnlineNotice\020\374\007\022\030\n\023WeChatOfflineNot" +
      "ice\020\375\007\022\024\n\017FriendAddNotice\020\376\007\022\024\n\017FriendDe" +
      "lNotice\020\377\007\022\025\n\020FriendTalkNotice\020\200\010\022\025\n\020Tas" +
      "kResultNotice\020\201\010\022\035\n\030WeChatTalkToFriendNo" +
      "tice\020\202\010\022\033\n\026FriendAddReqeustNotice\020\203\010\022!\n\034" +
      "TalkToFriendTaskResultNotice\020\204\010\022&\n!Reque" +
      "stTalkDetailTaskResultNotice\020\205\010\022%\n PullW" +
      "eChatQrCodeTaskResultNotice\020\206\010\022\033\n\026Circle" +
      "NewPublishNotice\020\207\010\022\024\n\017CircleDelNotice\020\210" +
      "\010\022\025\n\020CircleLikeNotice\020\211\010\022\030\n\023CircleCommen" +
      "tNotice\020\212\010\022\032\n\025PostMessageReadNotice\020\213\010\022\027" +
      "\n\022ContactsInfoNotice\020\214\010\022\026\n\021ChatRoomAddNo" +
      "tice\020\215\010\022\032\n\025ContactLabelAddNotice\020\216\010\022\036\n\031T" +
      "akeMoneyTaskResultNotice\020\217\010\022\027\n\022CircleDet" +
      "ailNotice\020\220\010\022\026\n\021ChatRoomDelNotice\020\221\010\022\032\n\025" +
      "ChatRoomChangedNotice\020\222\010\022\'\n\"PullChatRoom" +
      "QrCodeTaskResultNotice\020\223\010\022\025\n\020TalkToFrien" +
      "dTask\020\256\010\022\024\n\017PostSNSNewsTask\020\257\010\022\023\n\016AddFri" +
      "endsTask\020\260\010\022 \n\033PostSNSNewsTaskResultNoti" +
      "ce\020\261\010\022\026\n\021DeleteSNSNewsTask\020\262\010\022\037\n\032AcceptF" +
      "riendAddRequestTask\020\263\010\022\030\n\023WeChatGroupSen" +
      "dTask\020\264\010\022\032\n\025WeChatMaintenanceTask\020\265\010\022\032\n\025" +
      "RequestTalkDetailTask\020\266\010\022\031\n\024PullWeChatQr" +
      "CodeTask\020\267\010\022\032\n\025TriggerFriendPushTask\020\270\010\022" +
      "\032\n\025TriggerCirclePushTask\020\271\010\022\034\n\027CircleCom" +
      "mentDeleteTask\020\272\010\022(\n#CircleCommentDelete" +
      "TaskResultNotice\020\273\010\022\033\n\026CircleCommentRepl" +
      "yTask\020\274\010\022\'\n\"CircleCommentReplyTaskResult" +
      "Notice\020\275\010\022\033\n\026TriggerMessageReadTask\020\276\010\022\026" +
      "\n\021RevokeMessageTask\020\277\010\022\027\n\022ForwardMessage" +
      "Task\020\300\010\022\036\n\031TriggerHistoryMsgPushTask\020\301\010\022" +
      "\033\n\026PullChatRoomQrCodeTask\020\302\010\022\032\n\025PostDevi" +
      "ceReAllocTask\020\303\010\022\033\n\026PostAccountOfflineTa" +
      "sk\020\304\010\022\025\n\020UpgradeAppNotice\020\305\010\022\033\n\026UpgradeD" +
      "eviceAppNotice\020\306\010\022\031\n\024PostFriendDetectTas" +
      "k\020\307\010\022\035\n\030PostStopFriendDetectTask\020\310\010\022\033\n\026P" +
      "ostDeleteDeviceNotice\020\311\010\022\032\n\025PostMomentsP" +
      "raiseTask\020\312\010\022\036\n\031PostStopMomentsPraiseTas" +
      "k\020\313\010\022\"\n\035PostStopWeChatMaintenanceTask\020\314\010" +
      "\022\031\n\024ModifyFriendMemoTask\020\315\010\022\027\n\022TakeLucky" +
      "MoneyTask\020\260\t\022\031\n\024PullFriendCircleTask\020\261\t\022" +
      "\031\n\024PullCircleDetailTask\020\262\t\022\023\n\016CircleLike" +
      "Task\020\263\t\022\034\n\027TriggerChatroomPushTask\020\272\t\022\034\n" +
      "\027RequestChatRoomInfoTask\020\273\t\022\034\n\027RequestCo" +
      "ntactsInfoTask\020\274\t\022\027\n\022ChatRoomActionTask\020" +
      "\275\t\022\034\n\027AddFriendInChatRoomTask\020\276\t\022\037\n\032AddF" +
      "riendFromPhonebookTask\020\277\t\022\025\n\020DeleteFrien" +
      "dTask\020\300\t\022\027\n\022SendLuckyMoneyTask\020\301\t\022\033\n\026Req" +
      "uestTalkContentTask\020\302\t\022\'\n\"RequestTalkCon" +
      "tentTaskResultNotice\020\303\t\022 \n\033ForwardMessag" +
      "eByContentTask\020\304\t\022\025\n\020FriendPushNotice\020\352\017" +
      "\022\031\n\024PostDeviceInfoNotice\020\353\017\022 \n\033PostFrien" +
      "dDetectCountNotice\020\354\017\022\025\n\020CirclePushNotic" +
      "e\020\355\017\022!\n\034PostMomentsPraiseCountNotice\020\356\017\022" +
      "\027\n\022ChatroomPushNotice\020\357\017\022\033\n\026ContactLabel" +
      "InfoNotice\020\360\017\022\031\n\024HistoryMsgPushNotice\020\361\017" +
      "\022\032\n\025ChatRoomMembersNotice\020\362\017\022\022\n\rGetWeCha" +
      "tsReq\020\352\027\022\022\n\rGetWeChatsRsp\020\353\027\022\035\n\030RecentFr" +
      "iendChangeNotice\020\354\027\022\034\n\027TodayFriendChange" +
      "Notice\020\355\027\022\030\n\023AccountLogoutNotice\020\356\027\022\026\n\021W" +
      "eChatLoginNotice\020\357\027\022\033\n\026SyncFriendListAsy" +
      "ncReq\020\360\027\022\033\n\026SyncFriendListAsyncRsp\020\361\027\022!\n" +
      "\034SyncRecentFriendListAsyncReq\020\362\027\022!\n\034Sync" +
      "RecentFriendListAsyncRsp\020\363\027\022 \n\033SyncToday" +
      "FriendListAsyncReq\020\364\027\022 \n\033SyncTodayFriend" +
      "ListAsyncRsp\020\365\027\022\036\n\031SyncFriendMessageAsyn" +
      "cReq\020\366\027\022\036\n\031SyncFriendMessageAsyncRsp\020\367\027\022" +
      "\035\n\030TalkToFriendTaskReceived\020\370\027\022\032\n\025ReadCh" +
      "atMessageNotice\020\371\027\022!\n\034SyncFriendAddReqeu" +
      "stAsyncReq\020\372\027\022!\n\034SyncFriendAddRequestAsy" +
      "ncRsp\020\373\027\022\035\n\030WeChatForceOfflineNotice\020\374\027\022" +
      "\033\n\026SyncQuickReplyAsyncReq\020\375\027\022\033\n\026SyncQuic" +
      "kReplyAsyncRsp\020\376\027\022\030\n\023QuickReplyAddNotice" +
      "\020\377\027\022\032\n\025QuickReplyAddReceived\020\200\030\022\030\n\023Quick" +
      "ReplyDelNotice\020\201\030\022\023\n\016GetTagGroupReq\020\202\030\022\023" +
      "\n\016GetTagGroupRsp\020\203\030\022\025\n\020GetTagFriendsReq\020" +
      "\204\030\022\025\n\020GetTagFriendsRsp\020\205\030\022\034\n\027WeChatForce" +
      "OnlineNotice\020\206\030\022\035\n\030DeleteRecentFriendNot" +
      "ice\020\207\030\022\034\n\027DeleteTodayFriendNotice\020\210\030\022\033\n\026" +
      "WeChatInfoChangeNotice\020\211\030\022\031\n\024GetLastestV" +
      "ersionReq\020\212\030\022\031\n\024GetLastestVersionRsp\020\213\030\022" +
      "\035\n\030CheckDeviceAppVersionReq\020\214\030\022\035\n\030CheckD" +
      "eviceAppVersionRsp\020\215\030\022\037\n\032NewAppVersionPu" +
      "blishNotice\020\216\030\022\023\n\016PostAppInfoReq\020\201\031\022\017\n\nP" +
      "ostLogReq\020\202\031*g\n\rEnumErrorCode\022\013\n\007Success" +
      "\020\000\022\014\n\007NoRight\020\351\007\022\021\n\014InvalidParam\020\352\007\022\022\n\rI" +
      "nternalError\020\353\007\022\024\n\017TargetNotOnline\020\354\007*5\n" +
      "\nEnumGender\022\021\n\rUnknownGender\020\000\022\010\n\004Male\020\001" +
      "\022\n\n\006Female\020\002*\325\001\n\017EnumContentType\022\022\n\016Unkn" +
      "ownContent\020\000\022\010\n\004Text\020\001\022\013\n\007Picture\020\002\022\t\n\005V" +
      "oice\020\003\022\t\n\005Video\020\004\022\n\n\006System\020\005\022\010\n\004Link\020\006\022" +
      "\013\n\007LinkExt\020\007\022\010\n\004File\020\010\022\014\n\010NameCard\020\t\022\014\n\010" +
      "Location\020\n\022\016\n\nLuckyMoney\020\013\022\016\n\nMoneyTrans" +
      "\020\014\022\t\n\005WeApp\020\r\022\r\n\tUnSupport\020c*<\n\017EnumOnli" +
      "neState\022\020\n\014UnknownState\020\000\022\n\n\006Online\020\001\022\013\n" +
      "\007Offline\020\002*]\n\014EnumTaskType\022\017\n\013UnknownTas" +
      "k\020\000\022\023\n\017ReadTencentNews\020\001\022\022\n\016ReadMPArticl" +
      "es\020\002\022\023\n\017ReadKYKArticles\020\003*@\n\017EnumAccount" +
      "Type\022\026\n\022UnknownAccountType\020\000\022\010\n\004Main\020\001\022\013" +
      "\n\007SubUser\020\002*K\n\016EnumSendStatus\022\014\n\010NoActio" +
      "n\020\000\022\013\n\007Sending\020\001\022\017\n\013SendSuccess\020\021\022\r\n\tSen" +
      "dError\020\020*|\n\026EnumForceOfflineReason\022\014\n\010No" +
      "Reason\020\000\022\033\n\027FuckedByOtherAuthorizer\020\001\022\r\n" +
      "\tByReAlloc\020\002\022\023\n\017ByDeviceOffline\020\003\022\023\n\017ByW" +
      "eChatOffline\020\004b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.AnyProto.getDescriptor(),
        }, assigner);
    internal_static_Jubo_JuLiao_IM_Wx_Proto_TransportMessage_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Jubo_JuLiao_IM_Wx_Proto_TransportMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Jubo_JuLiao_IM_Wx_Proto_TransportMessage_descriptor,
        new java.lang.String[] { "Id", "AccessToken", "MsgType", "Content", "RefMessageId", });
    com.google.protobuf.AnyProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
